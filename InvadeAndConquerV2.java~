/**
 *Program:InvadeAndConquerV2.java
 *Names: Jeyason Jeyaparan and Chris Lee
 *Date: January 9th 2019
 *Purpose: Create a game called Invade and Conquer.
 */
import javax.swing.*;  //includes methods for GUI which is a more complicated set of GUI components than the earlier awt.

import java.awt.*;//includes methods for Java classes (abstract window toolkit) for painting and images and it has containers that can hold components, such as a panel and the layout manager which helps with the design and the user interface objects ,such as buttons and scrollbars can fire events by the user.

import java.awt.event.*;

import java.io.*;  //input and output utility in Java file library

import java.util.Scanner;

public class InvadeAndConquerV2 extends JFrame implements ActionListener{
  
  //I will place my class variables, such as Buttons, text fields, and Labels.
  //*****************************************************************************************
  
  //Create all of the constant variables used in the the wheelOfOpportunity array.
  final int NOTHING  = 0;
  final int LOSE_1_TOKEN = 1;
  final int GAIN_1_TOKEN = 2;
  
  //Create the array for the wheel of opportunity.
  int [] wheelOfOpportunity = {GAIN_1_TOKEN,NOTHING,NOTHING,NOTHING,NOTHING,LOSE_1_TOKEN,NOTHING,NOTHING,NOTHING,NOTHING};
  
  //Set the numOfBlackTokens to 2.
  int numOfBlackTokens = 2;
  
  //Set the numOfWhiteTokens to 2.
  int numOfWhiteTokens = 2;
  
  //Add a tracker to determine whether to display that it is the black player's turn or the white player's turn.If the turnCounter is 0, then it is white player's turn, but if the turn counter is 1 then it is black player's turn.
  int turnCounter = 0;
  
  //Crate a playerOneNameGame and playerTwoNameGame.
  String playerOneNameGame = "";
  String playerTwoNameGame = "";

  //Set the image icon to icon.png. 
  ImageIcon iconImg = new ImageIcon("icon.PNG");
  
  //Set the board setup image to boardIcon.
  ImageIcon boardIcon = new ImageIcon(new ImageIcon("invadeAndConquer-setup.jpg").getImage().getScaledInstance(200,200,Image.SCALE_DEFAULT));
  
  //Have the back button image be set to back and have its realtive size by 70 by 70.
  ImageIcon back = new ImageIcon(new ImageIcon("back_button_37286.PNG").getImage().getScaledInstance(70,70,Image.SCALE_DEFAULT));
  
  //Have the white token image be set to whiteImg and have its realtive size be 70 by 70.
  ImageIcon whiteImg = new ImageIcon(new ImageIcon("whiteToken.PNG").getImage().getScaledInstance(70, 70, Image.SCALE_DEFAULT));
  
  //Have the white token image used on the  scoreboard to be set to whiteImgScoreboard and have its realtive size be 150 by 150.
  ImageIcon whiteImgScoreboard = new ImageIcon(new ImageIcon("whiteToken.PNG").getImage().getScaledInstance(100,100 , Image.SCALE_DEFAULT));
  
  //Have the white token image used in the actual game itself to be set to whiteImgGame and have its realtive size be 50 by 50.
  ImageIcon whiteImgGame = new ImageIcon(new ImageIcon("whiteToken.PNG").getImage().getScaledInstance(50,50 , Image.SCALE_DEFAULT));
  
  //Set the black token image to be set to blackImg and have its relative size be 70 by 70.
  ImageIcon blackImg = new ImageIcon(new ImageIcon("blackToken.PNG").getImage().getScaledInstance(70, 70, Image.SCALE_DEFAULT));
  
  //Set the black token image used on the scoreboard  to be set to blackImgGame and have its relative size be 150 by 150.
  ImageIcon blackImgScoreboard = new ImageIcon(new ImageIcon("blackToken.PNG").getImage().getScaledInstance(100,100, Image.SCALE_DEFAULT));
  
  //Set the black token image used in the actual game itself be set to blackImgGame and have its relative size be 50 by 50.
  ImageIcon blackImgGame = new ImageIcon(new ImageIcon("blackToken.PNG").getImage().getScaledInstance(50,50,Image.SCALE_DEFAULT));
  
  //Add the playAgainButton.
  ImageIcon playAgainButton = new ImageIcon(new ImageIcon("playAgainButton.png").getImage().getScaledInstance(100,100,Image.SCALE_DEFAULT));
  
  //Set the thumbs up image to be set to thumbsUp and have its size to be 100 by 100.
  ImageIcon thumbsUp = new ImageIcon(new ImageIcon("ThumbsUp.png").getImage().getScaledInstance(200,200,Image.SCALE_DEFAULT));
  
  //Set the thumbs down image to be set to thumbsDown and have its size to be 200 by 200
  ImageIcon thumbsDown = new ImageIcon(new ImageIcon("ThumbsDown.png").getImage().getScaledInstance(200,200,Image.SCALE_DEFAULT));

  //Set the large back image to be set to largeBack and have its size to be 200 by 200
  ImageIcon largeBack = new ImageIcon(new ImageIcon("back_button_37286.PNG").getImage().getScaledInstance(100,100,Image.SCALE_DEFAULT));
  
  //Set the stop image used in the actual game itself be set to stop and have its relative size be 50 by 50.
  ImageIcon stop = new ImageIcon(new ImageIcon("stop.PNG").getImage().getScaledInstance(50,50,Image.SCALE_DEFAULT));
  
  //set the first font to alfa slab one, that is bold and is font size 50, for the title.
  Font fontOne = new Font ("Algerian", Font.BOLD, 50);
  
  //Set the end Title to Goudy Stout.
  Font endTitleFont = new Font("Goudy Stout",Font.BOLD,30);
  
  //Set the second font to alfa slab one that is bold and its font size is 30.
  Font fontTwo = new Font ("Algerian", Font.BOLD, 30);
  
  //Set the third font to alfa slab one that is bold and its font size is 20,which are for the subheadings or the text labels.
  Font fontThree = new Font ("Alfa Slab One", Font.BOLD, 20);
  
  //Set the fourth font to alfa slab one that is plain for the how to play text for the actual descriptions for how to play the game.
  Font fontFour = new Font ("Aharoni", Font.BOLD, 14);
  
  //Set the fifth font to impact that is plain for displaying the player's names.
  Font fontFive = new Font("Berlin Sans FB Demi",Font.PLAIN,18);
  
  //Set a sixth font to OCRA that is bold for displaying the scoreboard title.
  Font fontSix = new Font("OCRA",Font.BOLD,50);
  
  //Set the seventh font to OCRA that is bold for displaying the number of black and white tokens.
  Font fontSeven = new Font("OCRA",Font.BOLD,14);
  
  //Set a ninth font for displaying the title for the are you sure panel.
  Font fontEight = new Font("Arial",Font.BOLD,49);
  
  //Set the tenth font as Castellar and is bold and it has a much bigger font.
  Font fontTen = new Font("Castellar",Font.BOLD,60);
  
  //Set the eleventh font as Goudy Stout that is bold and it has a much bigger font.
  Font fontEleven = new Font("Goudy Stout",Font.BOLD,30);
  
  //Set the twelfth font as OCRA and it is plain used for label the buttons on our board .
  Font fontTwelve = new Font("OCRA",Font.PLAIN,42);
  
  //Set the thirteeth font as Castellar and it is bold and it is used for the wheel of opportunity labels.
  Font fontThirteen = new Font("Castellar",Font.BOLD,14);
  
  //Set the fourteeth font as Castellar and it is bold and it is used for displaying the white and black buttons.
  Font fontFourteen = new Font("Castellar",Font.BOLD,16);
  
  //Add the score for the white player on the scoreboard.
  JButton whiteButtonScoreboard = new JButton("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens,whiteImgScoreboard);
  
  //Add the score for the black player on the scoreboard.
  JButton blackButtonScoreboard = new JButton("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens,blackImgScoreboard);
  
  //Add the white player's score to the whiteWinPan panel.
  JButton whiteWinningWhiteScore= new JButton("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens,whiteImgScoreboard);
  
  //Add the black player's score to the whiteWinPan panel.
  JButton whiteWinningBlackScore = new JButton("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens,blackImgScoreboard);
  
  //Add the black player's score to the blackWinPan panel.
  JButton blackWinningBlackScore= new JButton("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens,blackImgScoreboard);
  
  //Add the white player's score to the blackWinPan panel.
  JButton blackWinningWhiteScore = new JButton("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens,whiteImgScoreboard);
  
  //Add a draw white winning score and a draw black winning score.
  JButton drawWinningWhiteScore = new JButton("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens,whiteImgScoreboard);
  JButton drawWinningBlackScore = new JButton("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens,blackImgScoreboard);

  //Add a play again button for both white and black and draw panels.
  JButton whiteWannaPlayAgain = new JButton("WANNA PLAY AGAIN!",playAgainButton);
  JButton blackWannaPlayAgain = new JButton("WANNA PLAY AGAIN!",playAgainButton);
  JButton drawWannaPlayAgain = new JButton("WANNA PLAY AGAIN!",playAgainButton);
  
  //Add a button called yes.
  JButton yesButton = new JButton("YES",thumbsUp);
  
  //Add a button called no.
  JButton noButton = new JButton("NO",thumbsDown);
  
  //Add a buttons called whiteMainMenuButton and blackMainMenu button to allow the user to return to the main menu once the game is over.
  JButton whiteMainMenuButton = new JButton("BACK TO MAIN MENU", largeBack);
  JButton blackMainMenuButton = new JButton("BACK TO MAIN MENU", largeBack);
  JButton drawMainMenuButton = new JButton("BACK TO MAIN MENU",largeBack);
  
  //set the how to play button to HOW TO PLAY, with the image of an i for information.
  JButton howToPlayButton = new JButton ("HOW TO PLAY", new ImageIcon("howtoplaybutton.PNG")); 
  
  //Set the play button to the play the game and put the image beside it. 
  JButton playButton = new JButton ("PLAY THE GAME", new ImageIcon("playbutton.PNG"));
  
  //This is the back button on the how to play screen
  JButton backButton = new JButton("BACK",back);
  
  //Have a back to main menu button.
  JButton backToMainMenu = new JButton("BACK TO MAIN MENU           ",back);
  
  //Have a JButton for cannot go.
  JButton cannotGo = new JButton("I CANNOT GO!                            ", stop);
  
  //Have a next button.
  JButton nextButton = new JButton("NEXT");
  
  //Set the white tokens used in the game.
  
  //These white tokens are used in the how to play panel.
  JLabel whiteLabel = new JLabel(whiteImg);
  JLabel whiteLabel2 = new JLabel(whiteImg);
  JLabel whiteToken = new JLabel(whiteImg);
  
  //These white tokens are used in the main menu panel.
  JLabel whiteToken2 = new JLabel(whiteImg);
  JLabel whiteToken3 = new JLabel(whiteImg);
  JLabel whiteToken4 = new JLabel(whiteImg);
  
  //Set the black tokens used in the game.
  
  //These black tokens are used in the how to play panel.
  JLabel blackLabel = new JLabel(blackImg);
  JLabel blackLabel2 = new JLabel(blackImg);
  JLabel blackToken = new JLabel(blackImg);
  
  //These black tokens are used in the main menu panel.
  JLabel blackToken2 = new JLabel(blackImg);
  JLabel blackToken3 = new JLabel(blackImg);
  JLabel blackToken4 = new JLabel(blackImg);
  JLabel blackToken5 = new JLabel(blackImg);
  JLabel blackToken6 = new JLabel(blackImg);
  
  //Set the JLabel to title label.
  JLabel titleLabel = new JLabel("INVADE & CONQUER",SwingConstants.CENTER);
  
  //Create a creators label for the authors of the game, which is Chris Lee and Jeyason Jeyaparan.
  JLabel creatorsLabel = new JLabel("BY: CHRIS LEE & JEYASON JEYAPARAN ",SwingConstants.CENTER);
  
  //Set the text for the how to play label to HOW TO PLAY.
  JLabel howToPlayLabel = new JLabel("HOW TO PLAY");
  
  //Have the text for the first how to play label to be Pieces Used In Game. 
  JLabel howToPlayLabel1 = new JLabel("Pieces Used In Game");
  
  //Have the text for the second how to play label to be Initial Board Setup.
  JLabel howToPlayLabel2 = new JLabel("Initial Board Setup");
  
  //Have the text for the third how to play label to be Rules.
  JLabel howToPlayLabel3 = new JLabel("Rules");
  
  //Have the text for the fourth how to play label to be How to Win.
  JLabel howToPlayLabel4 = new JLabel("How to Win");
  
  //Have the text for the score board label to be  SCOREBOARD.
  JLabel scoreboardLabel = new JLabel ("SCOREBOARD",JLabel.CENTER);
  
  //Have the text for the  white turn label to be WHITE TURN.
  JLabel whiteTurnLabel = new JLabel ("WHITE TURN");
  
  //Have the text for the  black turn label to be BLACK TURN.
  JLabel blackTurnLabel = new JLabel ("BLACK TURN");
  
  //Set the icon as a JLabel.
  JLabel iconLabel = new JLabel(iconImg);
  
  //Set the board setup image as a JLabel.
  JLabel boardSetup = new JLabel(boardIcon);
  
  //Have a label to say the names of the players.
  JLabel goodLuck = new JLabel("GOOD LUCK "+playerOneNameGame+"AND"+playerTwoNameGame);
  
  //Have a label to say great job to the white player.
  JLabel greatJobWhite = new JLabel("");
  
  //Have a label to say great job to the black player.
  JLabel greatJobBlack = new JLabel("");
  
  //Create a label called wheel of opportunity.
  JLabel wheelOfOpportunityLabel = new JLabel("THE WHEEL OF OPPORTUNITY LANDED ON: ");
  
  //Create a label called wheelOutput which is a label for the wheel of opportunity.
  JLabel wheelOutput = new JLabel("");
  
  //Add empty label.
  JLabel emptyLabel = new JLabel(" ");
  
  //Add an empty label
  JLabel emptyLabel2 = new JLabel(" ");
  
  //Add label that inform the users that white has won the game
  JLabel  whiteWinLabel= new JLabel("     WHITE HAS WON THE GAME!");
  
  //Add label that informs the users that black has won the game
  JLabel blackWinLabel= new JLabel("     BLACK HAS WON THE GAME!");
  
  //Add label that informs the users that it is a draw
  JLabel drawLabel = new JLabel("                IT'S A DRAW!");
  
  //Add an dotted line label.
  JLabel dottedLine = new JLabel("-------------------------------------------------------------------------------------");
  
  //Add the label for chooseWisely.
  JLabel chooseWisely = new JLabel("");
 
  //Set the how to play text 1 to be a text area, that says that there is a white token and a black piece that is used by the game.
  JTextArea howToPlayText1 = new JTextArea("");
  
  //Set the how to play text 2 to be a text area, that describes the board.
  JTextArea howToPlayText2 = new JTextArea("");
  
  //Set the how to play text 3 to be a text area that that says the rules for the game.
  JTextArea howToPlayText3 = new JTextArea("");
  
  //Set the how to play text 4 to be a text area that says how the player wins the game.
  JTextArea howToPlayText4 = new JTextArea("");
  
  //Add label to ask the user if he or she is sure that they want to quit.
  JTextArea areYouSureArea = new JTextArea("ARE YOU SURE YOU WANT TO QUIT THIS GAME AND RETURN TO THE MAIN MENU?");
  
  //Have the nameField for whoever wins the game, with the highest win score be 20 spaces long.
  JTextField playerOneField= new JTextField(20);
  
  JTextField playerTwoField = new JTextField(20);
  
  //Create the file to store names.
  File playerNameFileInGame = new File("StorePlayerName.txt");
  
  //Create a text file in same place that program is saved within!
  File howToPlayFile = new File("howToPlayText.txt");

  //--------------------------------------Create all of the buttons for the game Board----------------------------------
  //This is the tiles that is used for the board.
  JButton a1 = new JButton("A1");
  JButton a2 = new JButton("A2");
  JButton a3 = new JButton("A3");
  JButton a4 = new JButton("A4");
  JButton a5 = new JButton("A5");
  JButton a6 = new JButton("A6");
  JButton a7 = new JButton("A7");
  JButton a8 = new JButton("A8");
  JButton b1 = new JButton("B1");
  JButton b2 = new JButton("B2");
  JButton b3 = new JButton("B3");
  JButton b4 = new JButton("B4");
  JButton b5 = new JButton("B5");
  JButton b6 = new JButton("B6");
  JButton b7 = new JButton("B7");
  JButton b8 = new JButton("B8");
  JButton c1 = new JButton("C1");
  JButton c2 = new JButton("C2");
  JButton c3 = new JButton("C3");
  JButton c4 = new JButton("C4");
  JButton c5 = new JButton("C5");
  JButton c6 = new JButton("C6");
  JButton c7 = new JButton("C7");
  JButton c8 = new JButton("C8");
  JButton d1 = new JButton("D1");
  JButton d2 = new JButton("D2");
  JButton d3 = new JButton("D3");
  JButton d6 = new JButton("D6");
  JButton d7 = new JButton("D7");
  JButton d8 = new JButton("D8");
  JButton e1 = new JButton("E1");
  JButton e2 = new JButton("E2");
  JButton e3 = new JButton("E3");
  JButton e6 = new JButton("E6");
  JButton e7 = new JButton("E7");
  JButton e8 = new JButton("E8");
  JButton f1 = new JButton("F1");
  JButton f2 = new JButton("F2");
  JButton f3 = new JButton("F3");
  JButton f4 = new JButton("F4");
  JButton f5 = new JButton("F5");
  JButton f6 = new JButton("F6");
  JButton f7 = new JButton("F7");
  JButton f8 = new JButton("F8");
  JButton g1 = new JButton("G1");
  JButton g2 = new JButton("G2");
  JButton g3 = new JButton("G3");
  JButton g4 = new JButton("G4");
  JButton g5 = new JButton("G5");
  JButton g6 = new JButton("G6");
  JButton g7 = new JButton("G7");
  JButton g8 = new JButton("G8");
  JButton h1 = new JButton("H1");
  JButton h2 = new JButton("H2");
  JButton h3 = new JButton("H3");
  JButton h4 = new JButton("H4");
  JButton h5 = new JButton("H5");
  JButton h6 = new JButton("H6");
  JButton h7 = new JButton("H7");
  JButton h8 = new JButton("H8");
  
  //Set up the initial tokens that are on the board when the game starts.
  JButton e5 = new JButton(whiteImgGame);
  JButton d4 = new JButton(whiteImgGame);
  JButton e4 = new JButton(blackImgGame);
  JButton d5 = new JButton(blackImgGame);
  
  //-------------------------Panels---------------------------------------------
  
  //This is the main panel.
  JPanel mainPan = new JPanel();
  
  //This is the how to play panel.
  JPanel howToPlayPan = new JPanel();
  
  //This is the how to play sub panel 1, which is the title for the game.
  JPanel howToPlaySubPan1 = new JPanel();
  
  //This is the how to play sub panel 2, which is the description for how to play the game. 
  JPanel howToPlaySubPan2 = new JPanel();
  
  //This is the piecesUsedInGame which is the panel that is used to show the pieces of the game to user in how to play panel.
  JPanel piecesUsedInGame = new JPanel();
  
  //This is the initialBoardSetup panel which is the panel that is used to show the initial board set up in the how to play panel.
  JPanel initialBoardSetup = new JPanel();
  
  //This is the highScore panel which is the panel that is used to show the player with the most amount of wins.
  JPanel highScore = new JPanel();
  
  //This is the winning panel which is the panel that is used to show the player who won the game.
  JPanel winPan = new JPanel();
  
  //This is the creators panel which is the panel that is used to display the authors names, as well as the highest player winner scores.
  JPanel creators = new JPanel();
  
  //This is the title panel.
  JPanel title = new JPanel();
  
  //Create a panel for in game.
  JPanel inGamePan = new JPanel();
  
  //Create a gameboard.
  JPanel gameBoard = new JPanel();
  
  //Create a panel to keep track of the scores for the game.
  JPanel scoreboard = new JPanel();
  
  //Create a panel for the score board sub panel.
  JPanel scoreboardSubPan = new JPanel();
  
  //Add the areYouSure panel.
  JPanel areYouSure = new JPanel();
  
  //Add the whiteWin panel.
  JPanel whiteWinPan = new JPanel();
  
  //Add the blackWin panel.
  JPanel blackWinPan = new JPanel();
  
  //Add the blackWinSubPan panel.
  JPanel blackWinSubPan = new JPanel();

  //Add the panel for the blackWinsScores.
  JPanel blackWinsScores = new JPanel();
  
  //Add the whiteWinSubPan panel.
  JPanel whiteWinSubPan = new JPanel();
  
  //Add the panel for whiteWinsScoresPan.
  JPanel whiteWinsScoresPan = new JPanel();
  
  //add a panel for the blackWinsScoresPan
  JPanel blackWinsScoresPan = new JPanel();
  
  //Add the panel for whiteWinsButtons.
  JPanel whiteWinsButtons = new JPanel();
  
  //Add the panel for blackWinsButtons.
  JPanel blackWinsButtons = new JPanel();
  
  //Add the panel for the drawButtons.
  JPanel drawButtons = new JPanel();
  
  //Add a panel for entering names for white.
  JPanel whiteNameEnteringPan = new JPanel();
  
  
  //Add a panel for entering names for black.
  JPanel blackNameEnteringPan = new JPanel();
  
  //Add the draw panel
  JPanel drawPan = new JPanel();
  
  //Add the drawSubPan.
  JPanel drawSubPan = new JPanel();
  
  //Add the drawScoresPan
  JPanel drawScoresPan = new JPanel();
  
  //Add the yesNo panel.
  JPanel yesNoPanel = new JPanel();
  
  //Add the panel for the buttons.
  JPanel scoreboardButtons = new JPanel();
  //---------------------------------------------------------------------------------------
  //Set original row as 0.
  int originalRow = 0;
  int originalColumn = 0;
  
  //Set the copyOriginalRow and copyOriginalColumn as 0.
  int copyOriginalRow = 0;
  int copyOriginalColumn = 0;
  
  //Set the columnHolder to 0.
  int columnHolder = 0;
  
  //Set the rowHolder to 0.
  int rowHolder = 0;
  
  //The complete variable is used to check whether the  button that is clicked is valid or not.
  int complete = 0;
  
  //Set hasChanged variable to 0.
  int hasChanged = 0;
  
  //Set the emptySpaceChecker vairable to 0.
  int emptySpaceChecker= 0;
  
  //Set numOfDirections to 0.
  int numOfDirections = 0;
  
  //Set invalid to 0.
  int invalid = 0;
  
  //Set maxNumOfDirections to 0.
  int maxNumOfDirections = 0;
  
  //Set the highest index to 7.
  final int HIGHEST_INDEX = 7;
  
  //Set the lowest index to 0.
  final int LOWEST_INDEX = 0;
  
  //Create a constant variable called NUM_OF_ROWS_AND_COLUMNS which stores 8, because that is the number of rows and columns on the board.
  final int NUM_OF_ROWS_AND_COLUMNS = 8;
  
  char letter = ' ';
  char opposingLetter = ' ';
  
  //Create the boardTracker array.
  char [][] boardTracker = new char [NUM_OF_ROWS_AND_COLUMNS][NUM_OF_ROWS_AND_COLUMNS];
  
    
  //*******************************************************************
  
  
  /**Create the wheelOfOpportunityDisplaying method, which is used to display the wheel of opportunity.
    */
  public void wheelOfOpportunityDisplaying()
  {
    //Create a random spin variable for spinning the wheel.
    int randomSpin = (int)(Math.random()*10)+0;
    
    //Create a random variable for the rows and columns.
    int randomRow = (int)(Math.random()*8)+0;
    int randomColumn = (int)(Math.random()*8)+0;
    
    wheelOutput.setVisible(true);
    
    //If the wheel landed on NOTHING.
    if(wheelOfOpportunity[randomSpin] == NOTHING)
    {
      //Display to the users that nothing is what is being displayed.
      wheelOutput.setText("NOTHING");
    }
    //else if the wheel landed on Gain 1 Token
    else if(wheelOfOpportunity[randomSpin] ==  GAIN_1_TOKEN)
    {
      //Display to the player that he or she gained one token.
      wheelOutput.setText("GAIN_1_TOKEN");
      
      //if the player is white.
      if(turnCounter == 0)
      {
        //while the random element is W.
        while(boardTracker[randomRow][randomColumn] == 'W' ||boardTracker[randomRow][randomColumn] == '*' )
        {
          //Create a random variable for the rows and columns.
          randomRow = (int)(Math.random()*8)+0;
          randomColumn = (int)(Math.random()*8)+0;
          
        }//end of while loop for the random element being equalled to W or *.
        
        //turn the boardTracker element into a W.
        boardTracker[randomRow][randomColumn] = 'W';
        
        originalRow = randomRow;
        originalColumn = randomColumn;
        
        //display the boardTracker.
        displayBoardTracker();
        
        //call the arrayToButtons method.
        arrayToButtons();
        
      }//end of the if statement if the player is white.
      
      //else if the player is black.
      else if(turnCounter == 1)
      {
        //while the random element is B.
        while(boardTracker[randomRow][randomColumn] == 'B' ||boardTracker[randomRow][randomColumn] == '*' )
        {
          //Create a random variable for the rows and columns.
          randomRow = (int)(Math.random()*8)+0;
          randomColumn = (int)(Math.random()*8)+0;
          
        }//end of while loop for the random element being equalled to B or *.
        
        originalRow = randomRow;
        originalColumn = randomColumn;
        
        //turn the boardTracker at the randomRow and randomColumn into a B.
        boardTracker[randomRow][randomColumn] = 'B';
        
        //display the boardTracker.
        displayBoardTracker();
        
        //call the arrayToButtons method.
        arrayToButtons();
        
      }//end of else if the player is black.
      
    }//end of else if  the wheel landed on Gain 1 Token.
    
    //else if the wheel lands on Lose 1 Token.
    else if(wheelOfOpportunity[randomSpin] ==  LOSE_1_TOKEN)
    {
      //Display to the player that he or she gained one token.
      wheelOutput.setText("LOSE_1_TOKEN");
      
      //if the player is white.
      if(turnCounter == 0)
      {
        //while the random element is B or *.
        while(boardTracker[randomRow][randomColumn] == '*' || boardTracker[randomRow][randomColumn] == 'B')
        {
          //Create a random variable for the rows and columns.
          randomRow = (int)(Math.random()*8)+0;
          randomColumn = (int)(Math.random()*8)+0;
          
        }//end of while loop for the random element being equalled to B or *.
        
        originalRow = randomRow;
        originalColumn = randomColumn;
        
        //turn the boardTracker into a B.
        boardTracker[randomRow][randomColumn] = 'B';
        
        //display the boardTracker.
        displayBoardTracker();
        
        //turnCounter is equalled to 1.
        turnCounter = 1;
        
        //call the arrayToButtons method.
        arrayToButtons();
        
        //Set turnCounter to 0.
        turnCounter = 0;
        
      }//end of the if statement if the player is white.
      
      //else if the player is black.
      else if(turnCounter == 1)
      {
        //while the random element is W or *.
        while(boardTracker[randomRow][randomColumn] == '*' || boardTracker[randomRow][randomColumn] == 'W')
        {
          //Create a random variable for the rows and columns.
          randomRow = (int)(Math.random()*8)+0;
          randomColumn = (int)(Math.random()*8)+0;
          
        }//end of while loop for the random element being equalled to W or * .
        
        //turn the boardTracker into a W.
        boardTracker[randomRow][randomColumn] = 'W';
        
        originalRow = randomRow;
        originalColumn = randomColumn;
        
        //display the boardTracker.
        displayBoardTracker();
        
        //turnCounter is equalled to 1.
        turnCounter = 0;
        
        //call the arrayToButtons method.
        arrayToButtons();
        
        //turnCounter is equalled to 1.
        turnCounter = 1;
        
      }//end of the if statement if the player is black.
      
    }//end of else if the wheel lands on Lose 1 Token.
    
  }//end of wheel of opportunity displaying method.
  
  
  /**Create a method call switchTurn that switches the turns between black and white players.
    */
  public void switchTurns()
  {

    //if hasChanged is equalled to 1.
    if(hasChanged == 1)
    {
      
      //if the turnCounter is equalled to 0
      if(turnCounter == 0)
      {
        
        //Set the white player label as invisible and black turn label as visible.
        whiteTurnLabel.setVisible(false);
        blackTurnLabel.setVisible(true);
        
        //Set the chooseWisely text to be directed to the black player.
        chooseWisely.setText("CHOOSE WISELY "+playerTwoNameGame+"......");
        
        //switch to black player.
        turnCounter = 1;
        
      }//end of if statement for if the turnCounter is equalled to 0.
      
      //else if the turnCounter is equalled to 1.
      else if(turnCounter == 1)
      {

        //Set the white player label as invisible and black turn label as visible.
        blackTurnLabel.setVisible(false);
        whiteTurnLabel.setVisible(true);
        
        //Set the choose wisely text to be set to the white player.
        chooseWisely.setText("CHOOSE WISELY "+playerOneNameGame+"......");
        
        //switch to white player.
        turnCounter = 0;

      }//end of else if the turnCounter is equalled to 1.
      
      
    }//end of if statement if the hasChange is equalled to 1.
    //if there is 32 or more tokens on the board.
    if(numOfWhiteTokens+numOfBlackTokens >=32 && hasChanged == 1)
    {
      //Call the wheelOfOpportunityDisplaying method.
      wheelOfOpportunityDisplaying();
      
      //Call countTokens method.
      countTokens();
      
    }//end of if statement for if there are 32 or more tokens on the board.
    
  }//end the switchTurns method.
  
  /**This is a method used to count the tokens on the board.
    */
  public void countTokens()
  {
    //Set the number of black tokens to 0 and the number of white tokens to 0.
    numOfBlackTokens = 0;
    numOfWhiteTokens = 0;
    
    //for every row in the boardTrackerArray.
    for(int row = 0; row<NUM_OF_ROWS_AND_COLUMNS;row++)
    {
      //for every single column on the board.
      for(int column = 0; column<NUM_OF_ROWS_AND_COLUMNS;column++)
      {
        //if the tracker detects any B's in it.
        if(boardTracker[row][column] == 'B')
        {
          //Add 1 to the black tokens.
          numOfBlackTokens++;
          
          //if the number of blackTokens is above or equal to 10.
          if(numOfBlackTokens>=10)
          {
            //Set the text of the black tokens to 1 X less, since two digits take up more space on the frame than 1 digit.
            blackButtonScoreboard.setText("XXXXXXXXXXXXXXXXX"+numOfBlackTokens);
          }
          else if(numOfBlackTokens<10)
          {
            //if the black tokens are not above or equal to 10, add one more X.
            blackButtonScoreboard.setText("XXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
          }
          
        }//end of if statement for if the tracker detects any B's in it.
        
        //if the tracker detects any W's in it.
        else if(boardTracker[row][column] == 'W')
        {
          //Add 1 to the number of white tokens.
          numOfWhiteTokens++;
          
          //if the number of white tokens is equalled to or above 10.
          if(numOfWhiteTokens>=10)
          {
            //Change the text on the white label.
            whiteButtonScoreboard.setText("XXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
          }//end of if statement of white tokens is above 10.
          
          //else if the number of white tokens is less than 10.
          else if(numOfWhiteTokens<10)
          {
            //if the white tokens are not above or equal to 10, add one more X.
            whiteButtonScoreboard.setText("XXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
          }//end of else statement of white tokens if its less than 10.
          
        }//end of else if statement for if the boardTracker detects any W's in it.
        
      }//end of for loop for the columns of the boardTracker array.
      
    }//end of for loop for the rows of the boardTracker array.
    
    //display the board tracker.
    displayBoardTracker();
    
  }//end of countTokens method.
  
  /**This is a method used to check if the white player won.
    *@return true if white player won, and returns false if white player lost.
    */
  public boolean isWhiteWinner()
  {
    //If the white player won.
    if(numOfBlackTokens == 0)
    {
      //then return true.
      return true;
    }//end of if statemnt if the white player won.
    
    //Or if the total number of tokens is 64 and the number of white tokens for white is greater than the number of black tokens.
    else if(numOfBlackTokens+numOfWhiteTokens == 64 && numOfWhiteTokens>numOfBlackTokens)
    {
      //then return true as well.
      return true;
    }//end of else if statement for if white won.
    
    //Or else white did not win so return false.
    else
    {
      return false;
      
    }//end of else statement.
    
  }//end of isWhiteWinner boolean method.
  
  /**This is a method used to check if the black player won.
    *@return true if the black player did win, but return false if the black player lost.
    */
  public boolean isBlackWinner()
  {
    //If the black player won by taking all of the white player's tokens.
    if(numOfWhiteTokens == 0)
    {
      //then return true.
      return true;
      
    }//end of if statemnt if the black player won by taking all of the white player's tokens.
    
    //Or if the total number of tokens is 64 and the number of black tokens for white is greater than the number of white tokens.
    else if(numOfBlackTokens+numOfWhiteTokens == 64 && numOfBlackTokens>numOfWhiteTokens)
    {
      //then return true as well.
      return true;
      
    }//end of else if statement for if white won.
    
    //Or else black player did not win so return false.
    else
    {
      return false;
      
    }//end of else statement.
    
  }//end of isBlackWinner boolean method.
  
  /**This is a method used to check if both players draw.
    *@return true if both players draw and return false if both players did not get a draw.
    */
  public boolean isDraw()
  {
    //if both white and black tokens are 32 each
    if (numOfWhiteTokens == 32 && numOfBlackTokens == 32)
    {
      return true;
    }
    //else
    else
    {
      return false;
    }
  } //end of isDraw method
  
  /**This is a method used to initially set up the board tracker.
    */
  public void initialSetup()
  {
    //for every single row on the board.
    for(int row = 0;row< NUM_OF_ROWS_AND_COLUMNS;row++)
    {
      //for every single column on the board.
      for(int column = 0; column<NUM_OF_ROWS_AND_COLUMNS;column++)
      {
        //If the row is equalled to 3 and the column is equalled to 3.
        if(row == 3 && column == 3)
        {
          //Set the element at boardTracker[3][3] to W.
          boardTracker[row][column] = 'W';
          
        }//end of if statemenet if the row is equalled to 3 and the column is equalled to 3.
        
        //Else if the row is equalled to 3 and the column is equalled to 4.
        else if(row == 3 && column ==  4)
        {
          //Set the element at boardTracker [3][4] to B.
          boardTracker[row][column] ='B';
          
        }//end of else if statement if the row is equalled to 3 and the columb is equalled to 4.
        
        //else if the row is equalled to 4 and the column is equalled to 3.
        else if(row == 4 && column == 3)
        {
          //Set the element at boardTracker[4][3] to B.
          boardTracker[row][column] ='B';
          
        }//end of else if statement if the row is equalled to 4 and the column is equalled to 3.
        
        //else if the row is equalled to 4 and the column is equalled to 4.
        else if(row ==4 && column == 4)
        {
          //Set the element at boardTracker[4][4] to W.
          boardTracker[row][column] = 'W';
          
        }//end of else if statement if the row is equalled to 4 and the column is equalled to 4.
        else
        {
          //Set all of the other elements as an *.
          boardTracker[row][column] = '*';
          
        }//end of else statement to change all of the other elements to an *.
        
      }//end of for loop for every single column on the board.
      
    }//end of for loop for every single row on the board.
    
    //Set the icon as white.
    e5.setIcon(whiteImgGame);
    
    //Set the icon as black.
    d5.setIcon(blackImgGame);
    
    //Set the icon as black.
    e4.setIcon(blackImgGame);
    
    //Set the icon as white
    d4.setIcon(whiteImgGame);
    
    //Set rest of buttons to null.
    a1.setIcon(null);
    a1.setText("A1");
    a2.setIcon(null);
    a2.setText("A2");
    a3.setIcon(null);
    a3.setText("A3");
    a4.setIcon(null);
    a4.setText("A4");
    a5.setIcon(null);
    a5.setText("A5");
    a6.setIcon(null);
    a6.setText("A6");
    a7.setIcon(null);
    a7.setText("A7");
    a8.setIcon(null);
    a8.setText("A8");
    b1.setIcon(null);
    b1.setText("B1");
    b2.setIcon(null);
    b2.setText("B2");
    b3.setIcon(null);
    b3.setText("B3");
    b4.setIcon(null);
    b4.setText("B4");
    b5.setIcon(null);
    b5.setText("B5");
    b6.setIcon(null);
    b6.setText("B6");
    b7.setIcon(null);
    b7.setText("B7");
    b8.setIcon(null);
    b8.setText("B8");
    c1.setIcon(null);
    c1.setText("C1");
    c2.setIcon(null);
    c2.setText("C2");
    c3.setIcon(null);
    c3.setText("C3");
    c4.setIcon(null);
    c4.setText("C4");
    c5.setIcon(null);
    c5.setText("C5");
    c6.setIcon(null);
    c6.setText("C6");
    c7.setIcon(null);
    c7.setText("C7");
    c8.setIcon(null);
    c8.setText("C8");
    d1.setIcon(null);
    d1.setText("D1");
    d2.setIcon(null);
    d2.setText("D2");
    d3.setIcon(null);
    d3.setText("D3");
    d6.setIcon(null);
    d6.setText("D6");
    d7.setIcon(null);
    d7.setText("D7");
    d8.setIcon(null);
    d8.setText("D8");
    e1.setIcon(null);
    e1.setText("E1");
    e2.setIcon(null);
    e2.setText("E2");
    e2.setIcon(null);
    e3.setText("E3");
    e3.setIcon(null);
    e6.setText("E6");
    e6.setIcon(null);
    e7.setText("E7");
    e7.setIcon(null);
    e8.setText("E8");
    e8.setIcon(null);
    f1.setText("F1");
    f1.setIcon(null);
    f2.setText("F2");
    f2.setIcon(null);
    f3.setText("F3");
    f3.setIcon(null);
    f4.setText("F4");
    f4.setIcon(null);
    f5.setText("F5");
    f5.setIcon(null);
    f6.setText("F6");
    f6.setIcon(null);
    f7.setText("F7");
    f7.setIcon(null);
    f8.setText("F8");
    f8.setIcon(null);
    g1.setIcon(null);
    g1.setText("G1");
    g2.setIcon(null);
    g2.setText("G2");
    g3.setText("G3");
    g3.setIcon(null);
    g4.setText("G4");
    g4.setIcon(null);
    g5.setText("G5");
    g5.setIcon(null);
    g6.setText("G6");
    g6.setIcon(null);
    g7.setText("G7");
    g7.setIcon(null);
    g8.setText("G8");
    g8.setIcon(null);    
    h1.setText("H1");
    h1.setIcon(null);
    h2.setText("H2");
    h2.setIcon(null);
    h3.setText("H3");
    h3.setIcon(null);
    h4.setText("H4");
    h4.setIcon(null);
    h5.setText("H5");
    h5.setIcon(null);
    h6.setText("H6");
    h6.setIcon(null);
    h7.setText("H7");
    h7.setIcon(null);
    h8.setText("H8");
    h8.setIcon(null);
    
  }//end of initialSetup() or end of initialSetup method.

  /**This is a method used to display the boardtracker in the console, to track the X's and the tokens on the board.
    */ 
  public void displayBoardTracker()
  { 
    //Display the board tracker title in the console.
    System.out.println("BOARD TRACKER");
    
    //Display an opening dotted line.
    System.out.println("---------------------------------------------------------------------");
    
    //for every single row on the board.
    for(int row = 0;row< NUM_OF_ROWS_AND_COLUMNS;row++)
    {
      //Create a blank line to seperate the columns when being displayed.
      System.out.println();
      
      //for every single column on the board.
      for(int column = 0; column<NUM_OF_ROWS_AND_COLUMNS;column++)
      {
        //Display the elements in each row and have the elements in each row be beside each other.
        System.out.print(boardTracker[row][column]);
        
      }//end of for loop for every column on the board.
      
    }//end of for loop for every row on the board.
    
    //Display a blank line.
    System.out.println();
    
    //Display a closing dotted line.
    System.out.println("---------------------------------------------------------------------");
    
  }//end of displayBoardTracker method.
  
  /**Create a method called reset that resets the originalColumn, originalRow, and the columnHolder, and rowHolder to its original values.
    */
  public void reset()
  {
    //Reset the originalColumn and the originalRow and the columnHolder and the rowHolder and complete.
    originalColumn = copyOriginalColumn;
    originalRow = copyOriginalRow;
    columnHolder = originalColumn;
    rowHolder = originalRow;
    complete = 0;
    
  }//end of reset() method.
  
  /**Create a start method which is essientially the startup for checking the different sides.
    */
  public void start()
  {
    //Set the specific element on the boardTracker to be X.
    boardTracker[originalRow][originalColumn] = 'X';
    
    //Set the copyOriginalRow to value of originalRow and the copyOriginalColumn as value of originalColumn.
    copyOriginalRow = originalRow;
    copyOriginalColumn = originalColumn;
    
    //Set the columnHolder to originalColumn.
    columnHolder = originalColumn;
    
    //Set the rowHolder to 0.
    rowHolder = originalRow;
    
    
    //if it is white player's turn.
    if(turnCounter == 0)
    {
      //Set the letter as W.
      letter = 'W';
      
      //Set the opposing letter to B.
      opposingLetter = 'B';
      
    }//end of if statement for if it is white player's turn.
    
    //else if it is black player's turn.
    else if(turnCounter == 1)
    {
      //Set the letter as B.
      letter = 'B';
      
      //Set the opposing letter to W.
      opposingLetter = 'W';
      
    }//end of else if statement for if it is the black player's turn.

    invalid = 0;
    //if the empty space trracker is equalled to 0 then display the board tracker.
    if(emptySpaceChecker == 0)
    {
      displayBoardTracker();
    }
    
  }//end of start method.  
  
  /**Create a method to allow us to check whether the left side has any token changes or not.
    */
  public void checkLeftSide()
  {
    //Call the start method.
    start();
    
     if(emptySpaceChecker == 0)
    {
    
      //Display in console the direction that is being checked.
      System.out.println("Check Left Side");
    }
    
    //while the columnHolder is less than the HIGHEST_INDEX and complete does not equal to 1.
    while( complete != 1 && columnHolder>= LOWEST_INDEX)
    {
      //if the boardTracker element is an * or a letter.
      if(boardTracker[originalRow][columnHolder] == '*' || boardTracker[originalRow][columnHolder] == letter)
      {
        invalid = 1;
        
      }//end of if statement for if the boardTracker element is an * or a letter.
     
      //if the boardTracker at 0 and the column holder is equalled to opposing letter.
      if(boardTracker[originalRow][columnHolder] == opposingLetter &&  invalid == 0)
      {
        
        //if the columnHolder-1 does not equal to -1.
        if(columnHolder-1 != -1)
        {
          
          //if the boardTracker at 0 and the column holder subtracted by 1 is equalled to the letter.
          if(boardTracker[originalRow][columnHolder-1] == letter)
          {
            //Add 1 to complete
            complete++;
            
          }//end of the if statement for if the boardTracker is at 0 and the column holder subtracted by 1 is equalled to the letter.
        }//end of if  columnHolder-1 does not equal to 8.
        
      }//end of if statement for if the element is equalled to the opposing letter.
      
      //Decrease 1 to the column holder.
      columnHolder--;
      
    }//end of while loop.
    
    //if complete equals to 1 and emmpty space checker is equalled to 0.
    if(complete == 1 && emptySpaceChecker == 0)
    {
      //while the originalColumn is greater than or equal to the holder variable.
      while(originalColumn>=columnHolder)
      {
        //Have the boardTracker at the originalRow and the originalColumn be equalled to the letter.
        boardTracker[originalRow][originalColumn] = letter;
        
        //Call the arrayToButtons method.
        arrayToButtons();
        
        //Decrease 1 to originalColumn
        originalColumn--;
        
      }//end of while loop.
   
      
      //Change the hasChange to 1.
      hasChanged = 1;
      
    }//end of if statement for complete equalling to 1.
    
    //else if the complete is equalled to 0 and the hasChange equals to 1 and empty space checker is equalled to 0.
    else if(complete == 0 && hasChanged == 1 && emptySpaceChecker == 0)
    {
      //reset the element back to letter.
      boardTracker[copyOriginalRow ][copyOriginalColumn] = letter;
     
    }//end of else if  statement
    else
    {
      //Reset the element back to *.
      boardTracker[copyOriginalRow][copyOriginalColumn] = '*';
      
      //Add 1 to the numOfDirections variable.
      numOfDirections++;

    }//end of else statement.
    
     //if the emptySpaceChecker is equalled to 0.
    if(emptySpaceChecker == 0)
    {
      //Display the boardTracker.
      displayBoardTracker();
    }
    
    //Call the reset method to reset values of originalColumn, originalRow,columnHolder,rowHolder.
    reset();
    
  }//end of checkLeftSide method.
  
  /**Create a method to allow us to check whether the down left diagonal side has any token changes or not.
    */
  public void checkDownLeftDiagonalSide()
  {
    //Call the start method.
    start();
    
     if(emptySpaceChecker == 0)
    {
    
      //Display in console the direction that is being checked.
      System.out.println("Check Down Left Diagonal Side");
    }
    
    //while the columnHolder is greater than or equal to the LOWEST_INDEX and rowHolder is less than or equal to the HIGHEST_INDEX and complete does not equal to 1.
    while(complete != 1 && columnHolder>= LOWEST_INDEX && rowHolder<=HIGHEST_INDEX)
    {
      //if the boardTracker element is an * or a letter.
      if(boardTracker[rowHolder][columnHolder] == '*' || boardTracker[rowHolder][columnHolder] == letter)
      {
        invalid = 1;
        
      }//end of if statement for if the boardTracker element is an * or a letter.
      
      //if the boardTracker at rowHolder and the column holder is equalled to opposing letter and invalid equals to 0.
      if(boardTracker[rowHolder][columnHolder] == opposingLetter && invalid == 0)
      {
        //if the rowHolder+1 does not equal to 8 and the columnHolder-1 does not equal to -1.
        if(rowHolder+1 !=8 && columnHolder-1 != -1)
        {
          //if the boardTracker at rowHolder added by 1 and the column holder subtracted by 1 is equalled to the letter.
          if(boardTracker[rowHolder+1][columnHolder-1] == letter)
          {
            //Add 1 to complete
            complete++;
            
          }//end of the if statement for if the element in boardTracker is at rowHolder added by 1 and the column holder subtracted by 1 is equalled to the letter.
          
        }//end of if the rowHolder+1 does not equal to 8 and the columnHolder-1 does not equal to -1.
        
      }//end of if statement for if the element at the boardTracker at the  row holder and column holder is equalled to opposing letter.
      
      //Decrease 1 to the column holder.
      columnHolder--;
      
      //Add 1 to the row holder.
      rowHolder++;
      
    }//end of while loop.
    
    //if complete equals to 1.
    if(complete == 1 && emptySpaceChecker == 0)
    {
      //while the original column is greater than or equal to the column holder variable and the original row is less than or equal to the row holder variable. .
      while(originalColumn>=columnHolder && originalRow<= rowHolder )
      {
        //Have the boardTracker at originalRow and originalColumn be equalled to the letter.
        boardTracker[originalRow][originalColumn] = letter;
        
        //Call the arrayToButtons method.
        arrayToButtons();
        
        //Decrease 1 to originalColumn and add 1 to originalRow.
        originalColumn--;
        originalRow++;
        
      }//end of while loop.
      

      //Change the hasChange to 1.
      hasChanged = 1;
      
    }//end of if statement for complete equalling to 1.
    
    //else if the complete is equalled to 0 and the hasChange equals to 1.
    else if(complete == 0 && hasChanged == 1 && emptySpaceChecker == 0)
    {
      
      //reset the element back to letter.
      boardTracker[copyOriginalRow][copyOriginalColumn] = letter;
      
    }//end of else if  statement
    else
    {
      //Reset the element back to *.
      boardTracker[copyOriginalRow][copyOriginalColumn] = '*';
      
      //Add 1 to the numOfDirections.
      numOfDirections++;
      
      
    }//end of else statement.
    
     //if the emptySpaceChecker is equalled to 0.
    if(emptySpaceChecker == 0)
    {
      //Display the boardTracker.
      displayBoardTracker();
    }
    
    //Call the reset method to reset values of originalColumn, originalRow,columnHolder,rowHolder.
    reset();
    
  }//end of checkDownLeftDiagonalSide  method.
  
  /**Create a method to allow us to check whether the up left diagonal side has any token changes or not.
    */
  public void checkUpLeftDiagonalSide()
  {
    //Call the start method.
    start();
    
     if(emptySpaceChecker == 0)
    {
    
      //Display in console the direction that is being checked.
      System.out.println("Check Up Left Diagonal Side");
    }

    //while the columnHolder is greater than or equal to the LOWEST_INDEX amd the rowHolder is greater than or equal to the lowest index and complete doesn't equal to 1.
    while(complete != 1 && columnHolder>= LOWEST_INDEX && rowHolder>=LOWEST_INDEX)
    {
      //if the boardTracker element is an * or a letter.
      if(boardTracker[rowHolder][columnHolder] == '*' || boardTracker[rowHolder][columnHolder] == letter)
      {
        invalid = 1;
        
      }//end of if statement for if the boardTracker element is an * or a letter.
      
      //if the boardTracker at rowHolder and the column holder is equalled to opposing letter.
      if(boardTracker[rowHolder][columnHolder] == opposingLetter && invalid == 0)
      {
        //if the rowHolder-1 does not equal to -1 and the columnHolder-1 does not equal to -1.
        if((rowHolder-1)!= -1 && (columnHolder-1) != -1)
        {
          //if the boardTracker at rowHolder subtracted by 1 and the column holder subtracted by 1 is equalled to the letter.
          if(boardTracker[rowHolder-1][columnHolder-1] == letter)
          {
            //Add 1 to complete
            complete++;
            
          }//end of the if statement for if the element in boardTracker is at rowHolder subtracted by 1 and the column holder subtracted by 1 is equalled to the letter.
          
        }//end of if the rowHolder-1 does not equal to -1 and the columnHolder-1 does not equal to -1.
        
      }//end of if statement for if the element at the boardTracker at the  row holder and column holder is equalled to opposing letter.
        
      
      //Decrease 1 to the column holder.
      columnHolder--;
      
      //Decrease 1 to the row holder.
      rowHolder--;
      
    }//end of while loop.
    
    //if complete equals to 1.
    if(complete == 1 && emptySpaceChecker == 0)
    {
      //while the original column is greater than or equal to the column holder variable and the original row is greater than or equal to the row holder variable. .
      while(originalColumn>=columnHolder && originalRow>= rowHolder)
      {
        //Have the boardTracker at originalRow and originalColumn be equalled to the letter.
        boardTracker[originalRow][originalColumn] = letter;
        
        //Call the arrayToButtons method.
        arrayToButtons();
        
        //Subtract 1 to originalColumn and subtract 1 to originalRow.
        originalColumn--;
        originalRow--;
        
      }//end of while loop.
      
      //Change the hasChange to 1.
      hasChanged = 1;
      
    }//end of if statement for complete equalling to 1.
    
    //else if the complete is equalled to 0 and the hasChange equals to 1.
    else if(complete == 0 && hasChanged == 1 & emptySpaceChecker == 0)
    {
      
      //reset the element back to letter.
      boardTracker[copyOriginalRow][copyOriginalColumn] = letter;

    }//end of else if  statement
    else
    {
      //Reset the element back to *.
      boardTracker[copyOriginalRow][copyOriginalColumn] = '*';
      
      //Add 1 to the numOfDirections
      numOfDirections++;

    }//end of else statement.
    
    //if the emptySpaceChecker is equalled to 0.
    if(emptySpaceChecker == 0)
    {
      //Display the boardTracker.
      displayBoardTracker();
    }
    
    //Call the reset method to reset values of originalColumn, originalRow,columnHolder,rowHolder.
    reset();
    
  }//end of checkUpLeftDiagonalSide  method.
  
  /**Create a method to allow us to check whether the up right diagonal side has any token changes or not.
    */
  public void checkUpRightDiagonalSide()
  {
    //Call the start method.
    start();
    
     if(emptySpaceChecker == 0)
    {
    
      //Display in console the direction that is being checked.
      System.out.println("Check Up Right Diagonal Side");
    }
    
    //while  the columnHolder is less than or equal to the HIGHEST_INDEX and the rowHolder is greater than or equal to the LOWEST INDEX and complete doesn't equal to 1 .
    while( complete != 1 && columnHolder<= HIGHEST_INDEX && rowHolder>=LOWEST_INDEX)
    {
       //if the boardTracker element is an * or a letter.
      if(boardTracker[rowHolder][columnHolder] == '*' || boardTracker[rowHolder][columnHolder] == letter)
      {
        invalid = 1;
        
      }//end of if statement for if the boardTracker element is an * or a letter.
      
      //if the boardTracker at rowHolder and the column holder is equalled to opposing letter and invalid equals to 0.
      if(boardTracker[rowHolder][columnHolder] == opposingLetter && invalid == 0)
      {
        //if the rowHolder-1 does not equal to -1 or the columnHolder+1 does not equal to 8.
        if(((rowHolder-1) != -1 )&& ((columnHolder+1) != 8))
        {
          
          //if the boardTracker at rowHolder subtracted by 1 and the column holder added by 1 is equalled to the letter.
          if(boardTracker[rowHolder-1][columnHolder+1] == letter)
          {
            //Add 1 to complete
            complete++;
            
          }//end of the if statement for if the element in boardTracker is at rowHolder subtracted by 1 and the column holder added by 1 is equalled to the letter.
          
        }//end of if statement for if the rowHolder-1 does not equal to -1 and the columnHolder+1 does not equal to 8.
        
      }//end of if statement for if the element at the boardTracker at the  row holder and column holder is equalled to opposing letter.
      
      //Add 1 to the column holder.
      columnHolder++;
      
      //Subtract 1 to the row holder.
      rowHolder--;
      
    }//end of while loop.
    
    //if complete equals to 1.
    if(complete == 1 && emptySpaceChecker == 0)
    {
      //while the original column is less than or equal to the column holder  and the original row is greater than or equal to the row holder . 
      while(originalColumn<=columnHolder && originalRow>= rowHolder )
      {
        //Have the boardTracker at originalRow and originalColumn be equalled to the letter.
        boardTracker[originalRow][originalColumn] = letter;
        
        //Call the arrayToButtons method.
        arrayToButtons();
        
        //Add 1 to originalColumn and subtract 1 to originalRow.
        originalColumn++;
        originalRow--;
        
      }//end of while loop.
      
      //Change the hasChange to 1.
      hasChanged = 1;
      
    }//end of if statement for complete equalling to 1.
    
    //else if the complete is equalled to 0 and the hasChange equals to 1.
    else if(complete == 0 && hasChanged == 1 && emptySpaceChecker == 0)
    {
      
      //reset the element back to letter.
      boardTracker[copyOriginalRow][copyOriginalColumn] = letter;
     
      
    }//end of else if  statement
    else
    {
      //Reset the element back to *.
      boardTracker[copyOriginalRow][copyOriginalColumn] = '*';
      
      //Add 1 to the numOfDirections
      numOfDirections++;
    
      
    }//end of else statement.
    
    //if the emptySpaceChecker is equalled to 0.
    if(emptySpaceChecker == 0)
    {
      //Display the boardTracker.
      displayBoardTracker();
    }
    
    //Call the reset method to reset values of originalColumn, originalRow,columnHolder,rowHolder.
    reset();
    
  }//end of checkUpRightDiagonalSide  method.
  
  /**Create a method to allow us to check whether the down right digonal side has any token changes or not.
    */
  public void checkDownRightDiagonalSide()
  {
    //Call the start method.
    start();
    
     if(emptySpaceChecker == 0)
    {
    
      //Display in console the direction that is being checked.
      System.out.println("Check Down Right Diagonal Side");
    }
    
    //while  the columnHolder is less than or equal to the HIGHEST_INDEX and the rowHolder is less than or equal to the HIGHEST INDEX and complete doesn't equal to 1 .
    while( complete != 1 && columnHolder<= HIGHEST_INDEX && rowHolder<=HIGHEST_INDEX)
    {
       //if the boardTracker element is an * or a letter.
      if(boardTracker[rowHolder][columnHolder] == '*' || boardTracker[rowHolder][columnHolder] == letter)
      {
        invalid = 1;
        
      }//end of if statement for if the boardTracker element is an * or a letter.
      //if the boardTracker at rowHolder and the column holder is equalled to opposing letter and invalid equals to 0.
      if(boardTracker[rowHolder][columnHolder] == opposingLetter &&  invalid == 0)
      {
        //if the rowHolder+1 and the columnHolder+1 does not equal to 8.
        if((rowHolder+1) != 8 && (columnHolder+1 )!= 8)
        {
          //if the boardTracker at rowHolder added by 1 and the column holder added by 1 is equalled to the letter.
          if(boardTracker[rowHolder+1][columnHolder+1] == letter)
          {
            //Add 1 to complete
            complete++;
            
          }//end of the if statement for if the element in boardTracker is at rowHolder added by 1 and the column holder added by 1 is equalled to the letter.
        }//end of if the rowHolder+1 and the columnHolder+1 does not equal to 8.
      }//end of if statement for if the element at the boardTracker at the  row holder and column holder is equalled to opposing letter.
      
      //Add 1 to the column holder.
      columnHolder++;
      
      //Add 1 to the row holder.
      rowHolder++;
      
    }//end of while loop.
    
    //if complete equals to 1.
    if(complete == 1 && emptySpaceChecker == 0)
    {
      //while the original column is less than or equal to the column holder variable and the original row is less than or equal to the row holder variable. .
      while(originalColumn<=columnHolder && originalRow<= rowHolder )
      {
        //Have the boardTracker at originalRow and originalColumn be equalled to the letter.
        boardTracker[originalRow][originalColumn] = letter;
        
        //Call the arrayToButtons method.
        arrayToButtons();
        
        //Add 1 to originalColumn and add 1 to originalRow.
        originalColumn++;
        originalRow++;
        
      }//end of while loop.
      
      //Change the hasChange to 1.
      hasChanged = 1;
      
    }//end of if statement for complete equalling to 1.
    
    //else if the complete is equalled to 0 and the hasChange equals to 1.
    else if(complete == 0 && hasChanged == 1 && emptySpaceChecker == 0)
    {
      
      //reset the element back to letter.
      boardTracker[copyOriginalRow][copyOriginalColumn] = letter;
      
    }//end of else if  statement
    else
    {
      //Reset the element back to *.
      boardTracker[copyOriginalRow][copyOriginalColumn] = '*';
      
      //Add 1 to the numOfDirections
      numOfDirections++;
      
    }//end of else statement.
    
      //if the emptySpaceChecker is equalled to 0.
    if(emptySpaceChecker == 0)
    {
      //Display the boardTracker.
      displayBoardTracker();
    }
    
    //Call the reset method to reset values of originalColumn, originalRow,columnHolder,rowHolder.
    reset();
    
  }//end of checkDownRightDiagonalSide  method.
  
  /**Create a method to allow us to check whether the right side has any token changes or not.
    */
  public  void checkRightSide()
  {
    //Call the start method.
    start();
    
     if(emptySpaceChecker == 0)
    {
    
      //Display in console the direction that is being checked.
      System.out.println("Check Right Side");
    }
    
    //while the columnHolder is less than or equal to the HIGHEST_INDEX and complete doesn't equal to 1.
    while( complete != 1 && columnHolder<= HIGHEST_INDEX)
    {
       //if the boardTracker element is an * or a letter.
      if(boardTracker[originalRow][columnHolder] == '*' || boardTracker[originalRow][columnHolder] == letter)
      {
        invalid = 1;
        
      }//end of if statement for if the boardTracker element is an * or a letter.
      
      //if the boardTracker at original row and the holder is equalled to opposing letter and invalid equals to 0.
      if(boardTracker[originalRow][columnHolder] == opposingLetter && invalid == 0)
      {
        //if the columnHolder+1 does not equal to 8.
        if(columnHolder+1 != 8 )
        {
          //if the boardTracker at original row and the holder added by 1 is equalled to the letter.
          if(boardTracker[originalRow][columnHolder+1] == letter)
          {
            //Add 1 to complete
            complete++;
            
          }//end of the if statement for if the boardTracker is at originalRow and the holder added by 1 is equalled to the letter.
          
        }//end of if the columnHolder+1 does not equal to 8.
        
      }//end of if statement for if the element is equalled to opposing letter.
      
      //Add 1 to the column holder.
      columnHolder++;
      
    }//end of while loop.
    
    //if complete equals to 1.
    if(complete == 1 && emptySpaceChecker == 0)
    {
      //while the originalColumn is less than or equal to the column holder variable.
      while(originalColumn<=columnHolder)
      {
        //Have the boardTracker at originalRow and originalColumn be equalled to the letter.
        boardTracker[originalRow][originalColumn] = letter;
        
        //Call the arrayToButtons method.
        arrayToButtons();
        
        //Add 1 to originalColumn
        originalColumn++;
        
      }//end of while loop.

      
      //Change the hasChange to 1.
      hasChanged = 1;
      
    }//end of if statement for complete equalling to 1.
    
    //else if the complete is equalled to 0 and the hasChange equals to 1.
    else if(complete == 0 && hasChanged == 1 && emptySpaceChecker == 0)
    {
      
      //reset the element back to letter.
      boardTracker[copyOriginalRow][copyOriginalColumn] = letter;
      
    }//end of else if  statement
    else
    {
      //Reset the element back to *.
      boardTracker[copyOriginalRow][copyOriginalColumn] = '*';
      
      //Add 1 to the numOfDirections
      numOfDirections++;
      
    }//end of else statement.
    
     //if the emptySpaceChecker is equalled to 0.
    if(emptySpaceChecker == 0)
    {
      //Display the boardTracker.
      displayBoardTracker();
    }
    
    //Call the reset method to reset values of originalColumn, originalRow,columnHolder,rowHolder.
    reset();
    
  }//end of checkRightSide method.
  
  /**Create a method to check if there are any token changes going directly down the board.
    */
  public void checkDown()
  {
    //Call the start method.
    start();
    
     if(emptySpaceChecker == 0)
    {
    
      //Display in console the direction that is being checked.
      System.out.println("Check Down");
    }
    
    //while  the rowHolder is less than or equal to the HIGHEST_INDEX and complete doesn't equal to 1.
    while( complete != 1 && rowHolder<= HIGHEST_INDEX)
    {
       //if the boardTracker element is an * or a letter.
      if(boardTracker[rowHolder][originalColumn] == '*' || boardTracker[rowHolder][originalColumn] == letter)
      {
        invalid = 1;
        
      }//end of if statement for if the boardTracker element is an * or a letter.
      
      //if the boardTracker at rowHolder and the original column is equalled to opposing letter and invalid equals to 0.
      if(boardTracker[rowHolder][originalColumn] == opposingLetter  && invalid == 0)
      { 
        //if the rowHolder does not equal to 8.
        if(rowHolder+1 != 8)
        {
          //if the boardTracker at rowHolder added by 1 and the originalColumn is equalled to the letter.
          if(boardTracker[rowHolder+1][originalColumn] == letter)
          {
            //Add 1 to complete
            complete++;
            
          }//end of the if statement for if the boardTracker is at rowholder added by 1 and the column is equalled to the letter.
        }//end of if the rowHolder+1 does not equal to 8.
      }//end of if statement for if the element is equalled to opposing letter.
      
      //Add 1 to the  row holder.
      rowHolder++;
      
    }//end of while loop.
    
    //if complete equals to 1.
    if(complete == 1 && emptySpaceChecker == 0)
    {
      //while the originalRow is less than or equal to the row holder variable.
      while(originalRow<=rowHolder)
      {
        //Have the boardTracker at originalRow and originalColumn be equalled to the letter.
        boardTracker[originalRow][originalColumn] = letter;
        
        //Call the arrayToButtons method.
        arrayToButtons();
        
        //Add 1 to original row
        originalRow++;
        
      }//end of while loop.
      
      
      //Change the hasChange to 1.
      hasChanged = 1;
      
    }//end of if statement for complete equalling to 1.
    
    //else if the complete is equalled to 0 and the hasChange equals to 1.
    else if(complete == 0 && hasChanged == 1 && emptySpaceChecker == 0)
    {
      
      //reset the element back to letter.
      boardTracker[copyOriginalRow][copyOriginalColumn] = letter;
     
      
    }//end of else if  statement
    else
    {
      //Reset the element back to *.
      boardTracker[copyOriginalRow][copyOriginalColumn] = '*';
      
      //Add 1 to the numOfDirections
      numOfDirections++;
      
    }//end of else statement.
    
     //if the emptySpaceChecker is equalled to 0.
    if(emptySpaceChecker == 0)
    {
      //Display the boardTracker.
      displayBoardTracker();
    }
    
    //Call the reset method to reset values of originalColumn, originalRow,columnHolder,rowHolder.
    reset();
    
  }//end of checkDown method.
  
  /**Create a method for checking if there are any token changes going directly up the board.
    */
  public void checkUp()
  {
    //Call the start method.
    start();
    
    if(emptySpaceChecker == 0)
    {
    
      //Display in console the direction that is being checked.
      System.out.println("Check Up");
    }
    
    //while  the rowHolder is greater than or equal to the LOWEST_INDEX and complete doesn't equal to 1.
    while( complete != 1 && rowHolder>= LOWEST_INDEX)
    {
       //if the boardTracker element is an * or a letter.
      if(boardTracker[rowHolder][originalColumn] == '*' || boardTracker[rowHolder][originalColumn] == letter)
      {
        invalid = 1;
        
      }//end of if statement for if the boardTracker element is an * or a letter.
      
      //if the boardTracker at rowHolder and the original column is equalled to opposing letter and invalid equals to 0.
      if(boardTracker[rowHolder][originalColumn] == opposingLetter && invalid == 0)
      {
        //if the rowHolder does not equal to -1.
        if((rowHolder-1) >-1)
        {
          //if the boardTracker at rowHolder subtracted by 1 and the originalColumn is equalled to the letter.
          if(boardTracker[rowHolder-1][originalColumn] == letter)
          {
            //Add 1 to complete
            complete++;
            
          }//end of the if statement for if the boardTracker is at rowholder added by 1 and the column is equalled to the letter.
        }//end of the rowHolder-1 does not equal to -1.
      }//end of if statement for if the element is equalled to opposing letter.
      
      //Subtract 1 to the  row holder.
      rowHolder--;
      
    }//end of while loop.
    
    //if complete equals to 1.
    if(complete == 1 && emptySpaceChecker == 0)
    { 
      //while the originalRow is greater than or equal to the row holder variable.
      while(originalRow>=rowHolder)
      {
        //Have the boardTracker at originalRow and originalColumn be equalled to the letter.
        boardTracker[originalRow][originalColumn] = letter;
        
        //Call the arrayToButtons method.
        arrayToButtons();
        
        //Subtract 1 to original row
        originalRow--;
        
      }//end of while loop.
      
      //Change the hasChange to 1.
      hasChanged = 1;
      
    }//end of if statement for complete equalling to 1.
    
    //else if the complete is equalled to 0 and the hasChange equals to 1.
    else if(complete == 0 && hasChanged == 1 && emptySpaceChecker == 0)
    {
      
      //reset the element back to letter.
      boardTracker[copyOriginalRow][copyOriginalColumn] = letter;
      
      
    }//end of else if  statement
    else
    {
      //Reset the element back to *.
      boardTracker[copyOriginalRow][copyOriginalColumn] = '*';
      
      //Add 1 to the numOfDirections
      numOfDirections++;

    }//end of else statement.
    
     //if the emptySpaceChecker is equalled to 0.
    if(emptySpaceChecker == 0)
    {
      //Display the boardTracker.
      displayBoardTracker();
    }
    
    //Call the reset method to reset values of originalColumn, originalRow,columnHolder,rowHolder.
    reset();
    
  }//end of checkUp method.
  
  /**Create a method to convert between the array to the button.
    */
  public void arrayToButtons()
  {
    //If the row multiplied by 10 + the column is equalled to 0 then have that button be visible.
    if((originalRow*10)+originalColumn == 0)
    {
      //Set the text as nothing.
      a1.setText("");
      a1.setIcon(null);
      
      //if the turnCounter is equalled to 0.
      if(turnCounter == 0)
      {
        //Make the button display the white token.
        a1.setIcon(whiteImgGame);
        
      }//end of if statement for if the turnCounter is equalled to 0, so its white player's turn.
      
      //Or if its the black player's turn.
      else if(turnCounter == 1)
      {
        //Make the button display the black token.
        a1.setIcon(blackImgGame);
        
      }//end of else if statement for if the turnCounter is 1, so it is the black player's turn.
      
    }//end of if the row multiplied by 10 added by the column is equalled to 0.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 1.
    else if((originalRow*10)+originalColumn ==  1)
    {
      //Set the text as nothing.
      b1.setText("");
      b1.setIcon(null);
      
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        b1.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        b1.setIcon(blackImgGame);
        
      }//end of the if staetment if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 1.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 2.
    else if((originalRow*10)+originalColumn ==  2)
    {
      //Set the text as nothing.
      c1.setText("");
      c1.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        c1.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        c1.setIcon(blackImgGame);
        
      }//end of the if staetment if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 2.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 3.
    else if((originalRow*10)+originalColumn ==  3)
    {
      //Set the text as nothing.
      d1.setText("");
      d1.setIcon(null);
      
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        d1.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        d1.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 3.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 4.
    else if((originalRow*10)+originalColumn ==  4)
    {
      //Set the text as nothing.
      e1.setText("");
      e1.setIcon(null);
      
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        e1.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        e1.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 4.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 5.
    else if((originalRow*10)+originalColumn ==  5)
    {
      //Set the text as nothing.
      f1.setText("");
      f1.setIcon(null);
      
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        f1.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        f1.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 5.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 6.
    else if((originalRow*10)+originalColumn ==  6)
    {
      //Set the text as nothing.
      g1.setText("");
      g1.setIcon(null);
      
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        g1.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        g1.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 6.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 7.
    else if((originalRow*10)+originalColumn ==  7)
    {
      //Set the text as nothing.
      h1.setText("");
      h1.setIcon(null);
      
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        h1.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        h1.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 7.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 10.
    else if((originalRow*10)+originalColumn ==  10)
    {
      //Set the text as nothing.
      a2.setText("");
      a2.setIcon(null);
      
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        a2.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        a2.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 10.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 11.
    else if((originalRow*10)+originalColumn ==  11)
    {
      //Set the text as nothing.
      b2.setText("");
      b2.setIcon(null);
      
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        b2.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        b2.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 11.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 12.
    else if((originalRow*10)+originalColumn ==  12)
    {
      //Set the text as nothing.
      c2.setText("");
      c2.setIcon(null);
      
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        c2.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        c2.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 12.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 13.
    else if((originalRow*10)+originalColumn ==  13)
    {
      //Set the text as nothing.
      d2.setText("");
      d2.setIcon(null);
      
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        d2.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        d2.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 13.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 14.
    else if((originalRow*10)+originalColumn ==  14)
    {
      //Set the text as nothing.
      e2.setText("");
      e2.setIcon(null);
      
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        e2.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        e2.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 14.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 15.
    else if((originalRow*10)+originalColumn ==  15)
    {
      //Set the text as nothing.
      f2.setText("");
      f2.setIcon(null);
      
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        f2.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        f2.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 15.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 16.
    else if((originalRow*10)+originalColumn ==  16)
    {
      //Set the text as nothing.
      g2.setText("");
      g2.setIcon(null);

      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        g2.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        g2.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 16.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 17.
    else if((originalRow*10)+originalColumn ==  17)
    {
      //Set the text as nothing.
      h2.setText("");
      h2.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        h2.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        h2.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 17.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 20.
    else if((originalRow*10)+originalColumn ==  20)
    {
      //Set the text as nothing.
      a3.setText("");
      a3.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        a3.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        a3.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 20.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 21.
    else if((originalRow*10)+originalColumn ==  21)
    {
      //Set the text as nothing.
      b3.setText("");
      b3.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        b3.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        b3.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 21.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 22.
    else if((originalRow*10)+originalColumn == 22)
    {
      //Set the text as nothing.
      c3.setText("");
      c3.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        c3.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        c3.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 22.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 23.
    else if((originalRow*10)+originalColumn == 23)
    {
      //Set the text as nothing.
      d3.setText("");
      d3.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        d3.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        d3.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 23.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 24.
    else if((originalRow*10)+originalColumn == 24)
    {
      //Set the text as nothing.
      e3.setText("");
      e3.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        e3.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        e3.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 24.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 25.
    else if((originalRow*10)+originalColumn == 25)
    {
      //Set the text as nothing.
      f3.setText("");
      f3.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        f3.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        f3.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 25.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 26.
    else if((originalRow*10)+originalColumn == 26)
    {
      //Set the text as nothing.
      g3.setText("");
      g3.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        g3.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        g3.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 26.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 27.
    else if((originalRow*10)+originalColumn == 27)
    {
      //Set the text as nothing.
      h3.setText("");
      h3.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        h3.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        h3.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 27.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 30.
    else if((originalRow*10)+originalColumn == 30)
    {
      //Set the text as nothing.
      a4.setText("");
      a4.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        a4.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        a4.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 30.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 31.
    else if((originalRow*10)+originalColumn == 31)
    {
      //Set the text as nothing.
      b4.setText("");
      b4.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        b4.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        b4.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 31.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 32.
    else if((originalRow*10)+originalColumn == 32)
    {
      //Set the text as nothing.
      c4.setText("");
      c4.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        c4.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        c4.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 32.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 33.
    else if((originalRow*10)+originalColumn == 33)
    {
      //Set the text as nothing.
      d4.setText("");
      d4.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        d4.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        d4.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 33.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 34.
    else if((originalRow*10)+originalColumn == 34)
    {
      //Set the text as nothing.
      e4.setText("");
      e4.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        e4.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        e4.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
      //else if the turnCounter is equalled to 2.
      else if(turnCounter == 2)
      {
        e4.setIcon(blackImgGame);
      }
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 34.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 35.
    else if((originalRow*10)+originalColumn == 35)
    {
      //Set the text as nothing.
      f4.setText("");
      f4.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        f4.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        f4.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
      
      
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 35.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 36.
    else if((originalRow*10)+originalColumn == 36)
    {
      //Set the text as nothing.
      g4.setText("");
      g4.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        g4.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        g4.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
      
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 36.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 37.
    else if((originalRow*10)+originalColumn == 37)
    {
      //Set the text as nothing.
      h4.setText("");
      h4.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        h4.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        h4.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
      
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 37.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 40.
    else if((originalRow*10)+originalColumn == 40)
    {
      //Set the text as nothing.
      a5.setText("");
      a5.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        a5.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        a5.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 40.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 41.
    else if((originalRow*10)+originalColumn == 41)
    {
      //Set the text as nothing.
      b5.setText("");
      b5.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        b5.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        b5.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 41.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 42.
    else if((originalRow*10)+originalColumn == 42)
    {
      //Set the text as nothing.
      c5.setText("");
      c5.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        c5.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        c5.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
      
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 42.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 43.
    else if((originalRow*10)+originalColumn == 43)
    {
      //Set the text as nothing.
      d5.setText("");
      d5.setIcon(null);
      
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        d5.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        d5.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 43.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 44.
    else if((originalRow*10)+originalColumn == 44)
    {
      //Set the text as nothing.
      e5.setText("");
      e5.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        e5.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        e5.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 44.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 45.
    else if((originalRow*10)+originalColumn == 45)
    {
      //Set the text as nothing.
      f5.setText("");
      f5.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        f5.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        f5.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 45.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 46.
    else if((originalRow*10)+originalColumn == 46)
    {
      //Set the text as nothing.
      g5.setText("");
      g5.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        g5.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        g5.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 46.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 47.
    else if((originalRow*10)+originalColumn == 47)
    {
      //Set the text as nothing.
      h5.setText("");
      h5.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        h5.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else  if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        h5.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 47.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 50.
    else if((originalRow*10)+originalColumn == 50)
    {
      //Set the text as nothing.
      a6.setText("");
      a6.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        a6.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        a6.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 50.
    
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 51.
    else if((originalRow*10)+originalColumn == 51)
    {
      //Set the text as nothing.
      b6.setText("");
      b6.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        b6.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        b6.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 51.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 52.
    else if((originalRow*10)+originalColumn == 52)
    {
      //Set the text as nothing.
      c6.setText("");
      c6.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        c6.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        c6.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
      
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 52.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 53.
    else if((originalRow*10)+originalColumn == 53)
    {
      //Set the text as nothing.
      d6.setText("");
      d6.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        d6.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        d6.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 53.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 54.
    else if((originalRow*10)+originalColumn == 54)
    {
      //Set the text as nothing.
      e6.setText("");
      e6.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        e6.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        e6.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 54.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 55.
    else if((originalRow*10)+originalColumn == 55)
    {
      //Set the text as nothing.
      f6.setText("");
      f6.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        f6.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        f6.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 55.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 56.
    else if((originalRow*10)+originalColumn == 56)
    {
      //Set the text as nothing.
      g6.setText("");
      g6.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        g6.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        g6.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 56.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 57.
    else if((originalRow*10)+originalColumn == 57)
    {
      //Set the text as nothing.
      h6.setText("");
      h6.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        h6.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        h6.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 57.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 60.
    else if((originalRow*10)+originalColumn == 60)
    {
      //Set the text as nothing.
      a7.setText("");
      a7.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        a7.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        a7.setIcon(blackImgGame);
        
      }//end of the else if statement if its the black player's turn.
      
      
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 60.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 61.
    else if((originalRow*10)+originalColumn == 61)
    {
      //Set the text as nothing.
      b7.setText("");
      b7.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        b7.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        b7.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 61.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 62.
    else if((originalRow*10)+originalColumn == 62)
    {
      //Set the text as nothing.
      c7.setText("");
      c7.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        c7.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        c7.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 62.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 63.
    else if((originalRow*10)+originalColumn == 63)
    {
      //Set the text as nothing.
      d7.setText("");
      d7.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        d7.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        d7.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 63.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 64.
    else if((originalRow*10)+originalColumn == 64)
    {
      //Set the text as nothing.
      e7.setText("");
      e7.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        e7.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        e7.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.

    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 64.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 65.
    else if((originalRow*10)+originalColumn == 65)
    {
      //Set the text as nothing.
      f7.setText("");
      f7.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        f7.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        f7.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 65.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 66.
    else if((originalRow*10)+originalColumn == 66)
    {
      //Set the text as nothing.
      g7.setText("");
      g7.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        g7.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        g7.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 66.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 67.
    else if((originalRow*10)+originalColumn == 67)
    {
      //Set the text as nothing.
      h7.setText("");
      h7.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        h7.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        h7.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 67.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 70.
    else if((originalRow*10)+originalColumn == 70)
    {
      //Set the text as nothing.
      a8.setText("");
      a8.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        a8.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        a8.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 70.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 71.
    else if((originalRow*10)+originalColumn == 71)
    {
      //Set the text as nothing.
      b8.setText("");
      b8.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        b8.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        b8.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 71.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 72.
    else if((originalRow*10)+originalColumn == 72)
    {
      //Set the text as nothing.
      c8.setText("");
      c8.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        c8.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        c8.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 72.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 73.
    else if((originalRow*10)+originalColumn == 73)
    {
      //Set the text as nothing.
      d8.setText("");
      d8.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        d8.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        d8.setIcon(blackImgGame);
        
      }//end of the else  if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 73.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 74.
    else if((originalRow*10)+originalColumn == 74)
    {
      //Set the text as nothing.
      e8.setText("");
      e8.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        e8.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        e8.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 74.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 75.
    else if((originalRow*10)+originalColumn == 75)
    {
      //Set the text as nothing.
      f8.setText("");
      f8.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        f8.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        f8.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 75.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 76.
    else if((originalRow*10)+originalColumn == 76)
    {
      //Set the text as nothing.
      g8.setText("");
      g8.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        g8.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        g8.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 76.
    
    //else if the originalRow multiplied by 10 and added by the originalColumn is equalled to 77.
    else if((originalRow*10)+originalColumn == 77)
    {
      //Set the text as nothing.
      h8.setText("");
      h8.setIcon(null);
      //if it is the white player's turn.
      if(turnCounter == 0)
      {
        //Set the button as the white image used in the game.
        h8.setIcon(whiteImgGame);
        
      }//end of the if statement if its the white player's turn.
      
      //else if it is the black player's turn.
      else if(turnCounter == 1)
      {
        //Set the button as the black image used in the game.
        h8.setIcon(blackImgGame);
        
      }//end of the if statement if its the black player's turn.
      
      
    }//end of else if statement if the original row multipled by 10 added by the original column is equalled to 77.
    
  }//end of arrayToButtons().
  
  
  
  /**This is a special method known as the CONSTRUCTOR. This is where we set up and design the frame.
    */
  public InvadeAndConquerV2() throws IOException 
  {

    //---------- List of Colours -------------
    
    //Create a colors array to keep track of all of the colours used.
    Color colors[] = new Color[13];
    
    //Set each and every item or element of array to a specific colour, so it could be used throughout our program.
    colors[0] = Color.BLACK;
    colors[1] = Color.WHITE;
    colors[2] = Color.YELLOW;
    colors[3] = Color.GREEN;
    colors[4] = Color.PINK;
    
    //This colour is dark green.
    colors[5] = new Color(25, 79, 17);
    
    //This colour is dark blue.
    colors[6] = new Color(21, 61, 23);
    
    //This colour is light green.
    colors[7] = new Color(79, 196, 47);
    
    //This colour is light light green.
    colors[8] = new Color(173, 255, 114);
    
    //This colour is another dark blue.
    colors[9] = new Color(0, 99, 153);
    
    //This colour is light grey.
    colors[10] = new Color(186, 187, 188);
    
    //This colour is lime green.
    colors[11] = new Color(104, 255, 114);
    
    //This colour is dark grey.
    colors[12] = new Color(96, 100, 107);
    
    //------------------- Customizing howToPlayButton --------------------
    
    //Set how to play button font to 20, bold, and arial.
    howToPlayButton.setFont(new java.awt.Font("Arial", Font.BOLD, 20));
    
    //Set the how to play background to colour 5, which is dark green.
    howToPlayButton.setBackground(colors[5]);
    
    //Set the how to play button forground, which is the text colour of the text of the button to the element at the array index 1, which is white.  
    howToPlayButton.setForeground(colors[1]);
    
    //Set the border of the how to play button to black and make the size of the border a medium size, so the main menu looks visually appealing.
    howToPlayButton.setBorder(BorderFactory.createLineBorder(colors[0], 10));
    
    //---------------------- Customizing playButton -------------------
    
    //Set the font of the play button to arial, bold and at 20 size.
    playButton.setFont(new java.awt.Font("Arial", Font.BOLD, 20));
    
    //Set the background colour of button to the array index of 5 in colors array, which is dark green.
    playButton.setBackground(colors[5]);
    
    //Set the text of the button to the array index of 1 in the colors array which is white.
    playButton.setForeground(colors[1]);
    
    //Set the play button border to size 10, and it is black.
    playButton.setBorder(BorderFactory.createLineBorder(colors[0], 10));
    
    //-------------------------------Customize the backButton-----------------------------------------
    
    //Set the font of the back button to arial, bold and at 20 size.
    backButton.setFont(new java.awt.Font("Arial",Font.BOLD,20));
    
    //Set the background colour of button to the array index of 1 in the colors array which is dark green.
    backButton.setBackground(colors[5]);
    
    //Set the text of the button to the array index of 0 in the colors array which is white.
    backButton.setForeground(colors[1]);
    
    //Set the border of the button to size 5, and it is black.
    backButton.setBorder(BorderFactory.createLineBorder(colors[0],5));
    
    //---------- Customizing frame background -------------------------
    
    //Have the  background be a green grid.
    setContentPane(new JLabel(new ImageIcon("greengrid.png")));
    
    //--------- Customizing panels -------------------------------------
    
    
    //----------Set up the Frame ---------------------------------------
    
    //Set the title of the game to Invade and conquer which is by Chris Lee and Jeyason Jeyaparan 
    setTitle ("Invade & Conquer by Chris Lee & Jeyason Jeyaparan");
    
    // console window size (width, height)
    setSize (1280, 720); 
    
    //Set the frame layout to be grid layout.
    GridLayout grid = new GridLayout(1,0);
    setLayout(grid);
    
    //Wrap the text in all of the text areas in the how to play panel.
    howToPlayText1.setLineWrap(true);
    howToPlayText2.setLineWrap(true);
    howToPlayText3.setLineWrap(true);
    howToPlayText4.setLineWrap(true);
    areYouSureArea.setLineWrap(true);
    
    //Do not allow the players to edit the text areas.
    howToPlayText1.setEditable(false);
    howToPlayText2.setEditable(false);
    howToPlayText3.setEditable(false);
    howToPlayText4.setEditable(false);
    areYouSureArea.setEditable(false);
    //-----------------------------------------------------------------------------------------------------------
    //Have there be a Scanner object to read from the text file for player's names.
    Scanner readPlayerNames = new Scanner(playerNameFileInGame);
    
    //Create a playerCounter.
    int playerCounter = 0;
    
    //while there is still another line.
    while(readPlayerNames.hasNextLine())
    {
      //if the playerCounter is equalled to 0.
      if(playerCounter == 0)
      {
        playerOneNameGame = readPlayerNames.nextLine().toUpperCase();
      }
      //Else if the playerCounter is equalled to 1.
      else if(playerCounter == 1)
      {
        playerTwoNameGame = readPlayerNames.nextLine().toUpperCase();
      }
      //Add 1 to playerCounter.
      playerCounter++;
      
    }//End of the readPlayerNames line.
     

    //------------------------Set up the creators panel-----------------------------------------------------------
    
    //Have the creators panel be flow layout.
    FlowLayout flowCreators = new FlowLayout();
    creators.setLayout(flowCreators);
    
    //Add the creatorsLabel.
    creators.add(creatorsLabel);
  
    //Set the creatorsLabel to the colour of dark green.
    creatorsLabel.setForeground(colors[5]);
    
    //Set the creators label to the second font.
    creatorsLabel.setFont(fontTwo);
    
    //Set goodLuck label to include updated player's names.
    goodLuck.setText("GOOD LUCK "+playerOneNameGame+" AND "+playerTwoNameGame+"!!!");
    
    //Add the good luck label.
    creators.add(goodLuck);
    
    //Add the font and colour.
    goodLuck.setFont(fontFive);
    goodLuck.setBackground(colors[1]);
    goodLuck.setForeground(colors[5]);

    //Allow the background to appear.
    creators.setOpaque(false);
    
    //----------------Set up the title panel--------------------------------------------------
    
    //Have the title panel be flow layout.
    FlowLayout titleFlow = new FlowLayout();
    title.setLayout(titleFlow);
    
    //Add the black tokens.
    title.add(blackToken2);
    title.add(blackToken3);
    title.add(blackToken4);
    
    //Add the title label.
    title.add(titleLabel);
    
    //Add the white tokens.
    title.add(whiteToken2);
    title.add(whiteToken3);
    title.add(whiteToken4);
    
    //Allow the background to appear.
    title.setOpaque(false);
    
    //-------- Set up the Main Menu panel ----------------------------
    BorderLayout mainBorder = new BorderLayout(); //constructor to organize how components are added to the frame
    
    mainPan.setLayout (mainBorder);      //set the layout of the Panel to flow layout... for layout of components
    
    howToPlayButton.addActionListener(this);  // Add an action listener to the how to play button
    
    playButton.addActionListener(this); //Add an action listener to the play button.
    
    //Allow the background to appear.
    mainPan.setOpaque(false);
    
    //Add the how to play button at the right of the screen.
    mainPan.add(howToPlayButton, BorderLayout.LINE_END);     //add the component object, button to the frame
    
    //Add the play button at the left of the screen.
    mainPan.add(playButton, BorderLayout.LINE_START);
    
    //Add the title label at the top of the screen.
    mainPan.add(title, BorderLayout.PAGE_START);
    
    //Set the title label as dark green.
    titleLabel.setForeground(colors[5]);
    
    //Add the creators label to the bottom of the screen.
    mainPan.add(creators, BorderLayout.PAGE_END);
    
    mainPan.add(iconLabel, BorderLayout.CENTER);
    
    //Set the title label to the first font.
    titleLabel.setFont(fontOne);
    
   
    
    //-------- Set up the HOW TO PLAY sub panel 1------------------------------
    Scanner readFile = new Scanner(howToPlayFile);
    
    //Create a counter variable.
    int counter = 0;
    
    //Create a stringChanger variable to convert between textFile to an actual string.
    String stringChanger1 = "";
    String stringChanger2 = "";
    String stringChanger3 = "";
    String stringChanger4 = "";
    
    while(readFile.hasNextLine())
    {
      if(counter<=1)
      {
         if(counter == 1)
         {
           stringChanger1 = stringChanger1+ readFile.nextLine();
           howToPlayText1.setText(stringChanger1);
         }
         else
         {
           stringChanger1 = readFile.nextLine();
         }
      }
      else if(counter == 2)
      {
        stringChanger2 = readFile.nextLine();
        howToPlayText2.setText(stringChanger2);
      }
      else if(counter<=9)
      {
        if(counter>3)
        {
          stringChanger3 = stringChanger3+"\n"+ readFile.nextLine();
          howToPlayText3.setText(stringChanger3);
        }
        else
        {
          stringChanger3 = readFile.nextLine();
        }
      }
      else if(counter<=11)
      {
        if(counter>10)
        {
          stringChanger4 = stringChanger4+"\n"+ readFile.nextLine();
          howToPlayText4.setText(stringChanger4);
        }
        else
        {
          stringChanger4 = readFile.nextLine();
        }
      }
      
      //increment counter by 1.
      counter++;
      
    }//end of while loop for hasNextLine.
    
    //Close the read file immediately.
    readFile.close();
    
    //Have the layout for the first how to play sub panel to be flow layout.
    FlowLayout howToPlaySubFlow1 = new FlowLayout();
    howToPlaySubPan1.setLayout(howToPlaySubFlow1);       
    
    //Have black token be added next to the title of the panel.
    howToPlaySubPan1.add(blackToken6);
    
    //Have the white token be added first to the title of the panel.
    howToPlaySubPan1.add(whiteLabel);
    
    //Have the black token be added second to the title of the panel.
    howToPlaySubPan1.add(blackLabel);
    
    //Have the how to play label be added next to the title of the panel. 
    howToPlaySubPan1.add(howToPlayLabel);
    howToPlayLabel.setForeground(colors[5]);
    
    //Have the black token be added next to the title of the panel.
    howToPlaySubPan1.add(blackLabel2);
    
    //Have the white token be added next to the title of the panel.
    howToPlaySubPan1.add(whiteLabel2);
    
    //Have the black token be added next to the title of the panel.
    howToPlaySubPan1.add(blackToken5);
    
    // Add an action listener to the  back button
    backButton.addActionListener(this);  
    
    //Add the back button.
    howToPlaySubPan1.add(backButton);
    
    //--------------Set up the piecesUsedInGame panel-------------------------------
    
    //Have the piecesUsedInGame be a grid layout.
    piecesUsedInGame.setLayout(grid);
    
    //Add the pieces used in game text and icons.
    piecesUsedInGame.add(howToPlayText1);
    
    //Add the tokens for the white token and the black token.
    piecesUsedInGame.add(blackToken);
    piecesUsedInGame.add(whiteToken);
    
    //Set background for pieces Used in game to white.
    piecesUsedInGame.setBackground(colors[1]);
    
    //-----------------------Set up the initialBoardSetup panel-----------------------------
    //Have the initial board set up be a grid layout.
    initialBoardSetup.setLayout(grid);
    
    //Add the initial board setup text.
    initialBoardSetup.add(howToPlayText2);
    
    //Add the boardSetup image beside the text, to show the player how the board looks set up.
    initialBoardSetup.add(boardSetup);
    
    //Set background for initial board set up to be white.
    initialBoardSetup.setBackground(colors[1]);
    
    //--------------------Set up the How to play sub panel 2-------------------------------------------------------
    
    //Have the layout for the second how to play sub panel be the box layout, because the descriptions of the layouts are better in a top to bottom format.
    BoxLayout howToPlaySubBox = new BoxLayout(howToPlaySubPan2,BoxLayout.Y_AXIS);
    howToPlaySubPan2.setLayout(howToPlaySubBox);        
    
    //Add the labels and text areas for how to play the game.
    
    //Add the label for the pieces used in the game.
    howToPlaySubPan2.add(howToPlayLabel1);
    
    //Add the panel for pieces used in the game.
    howToPlaySubPan2.add(piecesUsedInGame);
    
    //Add the label for the initial board set up.
    howToPlaySubPan2.add(howToPlayLabel2);
    
    //Add the panel for the initial board set up.
    howToPlaySubPan2.add(initialBoardSetup);
    
    //Add the panel for the rules set up.
    howToPlaySubPan2.add(howToPlayLabel3);
    
    //Add the text for the rules of the game. 
    howToPlaySubPan2.add(howToPlayText3);
    
    //Add the label for how to win in the how to play sub panel.
    howToPlaySubPan2.add(howToPlayLabel4);
    
    //Add the text for how to win the game.
    howToPlaySubPan2.add(howToPlayText4);
    
    //Set the labels and text areas to all be dark green colour.
    howToPlayLabel1.setForeground(colors[5]);
    howToPlayText1.setForeground(colors[5]);             
    howToPlayLabel2.setForeground(colors[5]);
    howToPlayText2.setForeground(colors[5]);
    howToPlayLabel3.setForeground(colors[5]);
    howToPlayText3.setForeground(colors[5]);
    howToPlayLabel4.setForeground(colors[5]);
    howToPlayText4.setForeground(colors[5]);
    
    //-------- Set up the HOW TO PLAY panel ------------------------------
    BoxLayout howToPlayBox = new BoxLayout(howToPlayPan, BoxLayout.Y_AXIS);    // Create a BoxLayout
    
    howToPlayPan.setLayout(howToPlayBox);        //Set the layout of the 2nd PANEL to Box
    
    //Set the fonts for the different labels and texts in the how to play panel.
    howToPlayLabel.setFont(fontOne);
    howToPlayLabel1.setFont(fontThree);
    howToPlayLabel2.setFont(fontThree);
    howToPlayLabel3.setFont(fontThree);
    howToPlayLabel4.setFont(fontThree);
    howToPlayText1.setFont(fontFour);
    howToPlayText2.setFont(fontFour);
    howToPlayText3.setFont(fontFour);
    howToPlayText4.setFont(fontFour);
    
    //Add both of the sub panels for the how to play, to the how to play panel.
    howToPlayPan.add(howToPlaySubPan1);
    howToPlayPan.add(howToPlaySubPan2);
    
    //Set the backgrounds of both panels to light light green.
    howToPlaySubPan1.setBackground(colors[8]);
    howToPlaySubPan2.setBackground(colors[8]);
    
    //-----------------------Create the scordboardSubPanel-----------------------
    //Set the layout for the scoreboardSubPanel.
    BoxLayout scoreboardSubLayout = new BoxLayout(scoreboardSubPan,BoxLayout.Y_AXIS);
    
    //Set the layout of the score board sub panel as box layout.
    scoreboardSubPan.setLayout(scoreboardSubLayout);
    
    //Set background as light light green.
    scoreboardSubPan.setBackground(colors[8]);
    
    //Add the empty label.
    scoreboardSubPan.add(emptyLabel);
    
    //Add the dotted line.
    scoreboardSubPan.add(dottedLine);
    
    //Set the font and colour of the dotted line.
    dottedLine.setFont(fontSeven);
    dottedLine.setForeground(colors[5]);
    
    //Add the white turn label.
    scoreboardSubPan.add(whiteTurnLabel);
    
    //Set the font and colour of the white turn label.
    whiteTurnLabel.setFont(fontEleven);
    whiteTurnLabel.setForeground(colors[1]);
    
    //Add the black turn label.
    scoreboardSubPan.add(blackTurnLabel);
    
    //Set the font and colour of the blackTurnLabel.
    blackTurnLabel.setFont(fontEleven);
    blackTurnLabel.setBackground(colors[10]);
    
    //Set the black turn label as not visible.
    blackTurnLabel.setVisible(false);
    
    //Add the white token label.
    scoreboardSubPan.add(whiteButtonScoreboard);
    
    //Set the font and colour of the white button on the scoreboard.
    whiteButtonScoreboard.setFont(fontSeven);
    whiteButtonScoreboard.setBackground(colors[5]);
    whiteButtonScoreboard.setForeground(colors[1]);
    
    //Add the black token label.
    scoreboardSubPan.add(blackButtonScoreboard);
    
    //Set the font and colour of the black label on the scoreboard.
    blackButtonScoreboard.setFont(fontSeven);
    blackButtonScoreboard.setBackground(colors[5]);
    blackButtonScoreboard.setForeground(colors[1]);
    
    //Add a empty label space.
    scoreboardSubPan.add(emptyLabel2);
    
    //Add the wheelOfOpportunity label.
    scoreboardSubPan.add(wheelOfOpportunityLabel);
    
    //Set the font and colour of the wheel of opportunity.
    wheelOfOpportunityLabel.setFont(fontThirteen);
    wheelOfOpportunityLabel.setForeground(colors[9]);
    
    scoreboardSubPan.add(wheelOutput);
    
    //Set the font and colour of the wheel output.
    wheelOutput.setFont(fontThirteen);
    wheelOutput.setForeground(colors[9]);
    //Set the wheelOutput as invisible.
    wheelOutput.setVisible(false);
    
    scoreboardSubPan.add(chooseWisely);
    
    //Keep chooseWisely text updated.
    chooseWisely.setText("CHOOSE WISELY "+playerOneNameGame+"......");
    
    //Set the font and colour of the chooseWisely.
    chooseWisely.setFont(fontThirteen);
    chooseWisely.setForeground(colors[12]);
    

    //-----------------------Create a scoreboard buttons panel----------------------------
    
    //Set the layout for the scoreboard buttons panel.
    BoxLayout buttonsLayout = new BoxLayout(scoreboardButtons,BoxLayout.Y_AXIS);
    scoreboardButtons.setLayout(buttonsLayout);
    
    //Customizing the background colour of panel
    scoreboardButtons.setBackground(colors[8]);

    //Add the cannot go button.
    scoreboardButtons.add(cannotGo);
    
    //Add the cannotGo action listener.
    cannotGo.addActionListener(this);
    
    //Set the font and the colour of the back to main menu button.
    cannotGo.setFont(fontSeven);
    cannotGo.setBackground(colors[5]);
    cannotGo.setForeground(colors[1]);
    
    //Add the back to main menu button.
    scoreboardButtons.add(backToMainMenu);
    
    // Add an action listener to the  back to main menu button
    backToMainMenu.addActionListener(this);
    
    //Set the font and the colour of the back to main menu button.
    backToMainMenu.setFont(fontSeven);
    backToMainMenu.setBackground(colors[5]);
    backToMainMenu.setForeground(colors[1]);
    
    
    //---------------------Create the scoreboard panel-------------------------
    
    //Set the scoreBoardLayout to border layout.
    BorderLayout scoreboardLayout = new BorderLayout();
    scoreboard.setLayout(scoreboardLayout);
    
    //Set the background to the score board to be light light green.
    scoreboard.setBackground(colors[8]);
    
    //Add label for the scoreboard title.
    scoreboard.add(scoreboardLabel,BorderLayout.PAGE_START);
    
    //Set the font and background colour for the score board title.
    scoreboardLabel.setFont(fontSix);
    scoreboardLabel.setForeground(colors[5]);
    
    //Add the panel for the scoreboard sub panel.
    scoreboard.add(scoreboardSubPan,BorderLayout.CENTER);
    
    //Add the back to main menu button.
    scoreboard.add(scoreboardButtons,BorderLayout.PAGE_END);
    
    //----------------set up the yesNoPanel-------------------------------------
    //Set up the layout for the yesNoPanel as grid layout.
    yesNoPanel.setLayout(grid);
    
    //Add action listener to the yes and no buttons.
    yesButton.addActionListener(this);
    noButton.addActionListener(this);
    
    //Add the yes button.
    yesNoPanel.add(yesButton);
    
    //Set the font and the colour of the yes button.
    yesButton.setFont(fontTen);
    yesButton.setBackground(colors[7]);
    yesButton.setForeground(colors[1]);
    
    //Set the border of the button to size 10, and it is black.
    yesButton.setBorder(BorderFactory.createLineBorder(colors[0],10));
    
    //Add the no button.
    yesNoPanel.add(noButton);
    
    //Set the font and colour of the no button.
    noButton.setFont(fontTen);
    noButton.setBackground(colors[7]);
    noButton.setForeground(colors[1]);
    
    //Set the border of the button to size 10, and it is black.
    noButton.setBorder(BorderFactory.createLineBorder(colors[0],10));

    //----------------set up the areYouSure panel----------------------------
    
    //Set up the layout for the areYouSure panel.
    BorderLayout areYouSureLayout = new BorderLayout();
    areYouSure.setLayout(areYouSureLayout);
    
    //Set the background to dark green.
    areYouSure.setBackground(colors[5]);
    
    //Set up the label for the are you sure panel.
    areYouSure.add(areYouSureArea,BorderLayout.PAGE_START);
    
    //Set up the font and colours for the label.
    areYouSureArea.setFont(fontEight);
    areYouSureArea.setForeground(colors[1]);
    areYouSureArea.setBackground(colors[8]);
    
    //Add the button yes/no panel.
    areYouSure.add(yesNoPanel,BorderLayout.CENTER);
    
    //--------------------set up the whiteWin panel------------------------
    
    //Set up the layout for the whiteWinspanel
    BorderLayout whiteWinLayout = new BorderLayout();
    whiteWinPan.setLayout(whiteWinLayout);
    
    //Set background as light green.
    whiteWinPan.setBackground(colors[8]);
    
    //Set up the label for the white wins panel.
    whiteWinPan.add(whiteWinLabel, BorderLayout.PAGE_START);
    
    //Set up the font and colours for the label.
    whiteWinLabel.setFont(endTitleFont);
    whiteWinLabel.setForeground(colors[1]);
    
    //Add the whiteWinSubPan.
    whiteWinPan.add(whiteWinSubPan,BorderLayout.CENTER);
    
    //--------------------set up the whiteWinSubPan-----------------------
    
    //Set up the layout for the whiteWinSubPan.
    BoxLayout whiteWinSubPanLayout = new BoxLayout(whiteWinSubPan,BoxLayout.Y_AXIS);
    whiteWinSubPan.setLayout(whiteWinSubPanLayout);
    
    //Set the background for the subPanel as light green.
    whiteWinSubPan.setBackground(colors[8]);
    
    //Add the greatJobWhite label.
    whiteWinSubPan.add(greatJobWhite);
    
    //Set the text for the greatJobWhite label.
    greatJobWhite.setText("GREAT JOB "+playerOneNameGame+ " YOU WON!");
    
    //Set the font and colour for great Job White.
    greatJobWhite.setFont(endTitleFont);
    greatJobWhite.setForeground(colors[1]);
    
    //Add the whiteWinsScores panel.
    whiteWinSubPan.add(whiteWinsScoresPan);

    //Add the whiteWinsButtons panel .
    whiteWinSubPan.add(whiteWinsButtons);

    //--------------------Set up the  whiteWinsButtons---------------------------------
    //Set up the layout for the whiteWinsButtons panel.
    FlowLayout whiteWinsButtonsLayout = new FlowLayout();
    whiteWinsButtons.setLayout(whiteWinsButtonsLayout);
    
    whiteWinsButtons.setBackground(colors[8]);
    
    //Add the button for the white wins buttons to play again.
    whiteWinsButtons.add(whiteWannaPlayAgain);
    
    //Set the font and colour of the whiteWannaPlayAgain.
    whiteWannaPlayAgain.setFont(fontFourteen);
    whiteWannaPlayAgain.setBackground(colors[5]);
    whiteWannaPlayAgain.setForeground(colors[1]);
    
    //Add the button to go back to the main menu.
    whiteWinsButtons.add(whiteMainMenuButton);
    
    //Set the font and colour for the white win buttons panel to go back to the main menu.
    whiteMainMenuButton.setFont(fontFourteen);
    whiteMainMenuButton.setBackground(colors[5]);
    whiteMainMenuButton.setForeground(colors[1]);
    
    //Add action listeners to both of the buttons.
    whiteWannaPlayAgain.addActionListener(this);
    whiteMainMenuButton.addActionListener(this);
    
    //---------------------set up the whiteWinsScoresPan---------------------
    //Set up the layout for the whiteWinsScoresPan.
    FlowLayout whiteWinsScoresPanLayout = new FlowLayout();
    whiteWinsScoresPan.setLayout(whiteWinsScoresPanLayout);
    
     //Set the background for the subPanel as light green.
    whiteWinsScoresPan.setBackground(colors[8]);
    
    //Add the white player's score.
    whiteWinsScoresPan.add(whiteWinningWhiteScore);
    
    //Set font and colour of the whiteWinningWhiteScore.
    whiteWinningWhiteScore.setFont(fontFourteen);
    whiteWinningWhiteScore.setBackground(colors[5]);
    whiteWinningWhiteScore.setForeground(colors[1]);
    
    //Add the black player's score.
    whiteWinsScoresPan.add(whiteWinningBlackScore);

    //Set the font and colour of the whiteWinningBlackScore.
    whiteWinningBlackScore.setFont(fontFourteen);
    whiteWinningBlackScore.setBackground(colors[5]);
    whiteWinningBlackScore.setForeground(colors[1]);
  

    //--------------------set up the blackWin panel------------------------
    
    //Set up the layout for the blackWin panel.
    BorderLayout blackWinLayout = new BorderLayout();
    blackWinPan.setLayout(blackWinLayout);
    
    //Set the background to dark green.
    blackWinPan.setBackground(colors[8]);
    
    //Set up the label for the black wins panel.
    blackWinPan.add(blackWinLabel, BorderLayout.PAGE_START);
    
    //Set up the font and colours for the label.
    blackWinLabel.setFont(endTitleFont);
    blackWinLabel.setForeground(colors[0]);
    
    //Add the blackWinSubPan.
    blackWinPan.add(blackWinSubPan,BorderLayout.CENTER);
    
    //-----------------------Set up the blackWinSubPan---------------------
     //Set up the layout for the blackWinSubPan.
    BoxLayout blackWinSubPanLayout = new BoxLayout(blackWinSubPan,BoxLayout.Y_AXIS);
    blackWinSubPan.setLayout(blackWinSubPanLayout);
    
    //Set the background for the subPanel as light green.
    blackWinSubPan.setBackground(colors[8]);
    
    //Add the greatJobBlack label.
    blackWinSubPan.add(greatJobBlack);
    
    //Set the text for the greatJobWhite label.
    greatJobBlack.setText("GREAT JOB "+playerTwoNameGame+ " YOU WON!");
    
    //Set the font and colour for great Job Black.
    greatJobBlack.setFont(endTitleFont);
    greatJobBlack.setForeground(colors[0]);
    
    //Add the blackWinsScores panel.
    blackWinSubPan.add(blackWinsScoresPan);


    //Add the blackWinsButtons panel .
    blackWinSubPan.add(blackWinsButtons);

    //--------------------Set up the blackWinsButtons---------------------------------
    //Set up the layout for the whiteWinsButtons panel.
    FlowLayout blackWinsButtonsLayout = new FlowLayout();
    blackWinsButtons.setLayout(blackWinsButtonsLayout);
    
    //Set the background to light green.
    blackWinsButtons.setBackground(colors[8]);
    
    //Add the button for the white wins buttons to play again.
    blackWinsButtons.add(blackWannaPlayAgain);
    
    //Set the font and colour of the blackWannaPlayAgain.
    blackWannaPlayAgain.setFont(fontFourteen);
    blackWannaPlayAgain.setBackground(colors[5]);
    blackWannaPlayAgain.setForeground(colors[1]);
    
    //Add the button to go back to the main menu.
    blackWinsButtons.add(blackMainMenuButton);
    
    //Set the font and colour for the black win buttons panel to go back to the main menu.
    blackMainMenuButton.setFont(fontFourteen);
    blackMainMenuButton.setBackground(colors[5]);
    blackMainMenuButton.setForeground(colors[1]);
    
    //Add action listeners to both of the buttons.
    blackWannaPlayAgain.addActionListener(this);
    blackMainMenuButton.addActionListener(this);
    
    //---------------------set up the blackWinsScoresPan---------------------
    //Set up the layout for the blackWinsScoresPan.
    FlowLayout blackWinsScoresPanLayout = new FlowLayout();
    blackWinsScoresPan.setLayout(blackWinsScoresPanLayout);
    
     //Set the background for the subPanel as light green.
    blackWinsScoresPan.setBackground(colors[8]);
    
    //Add the white player's score.
    blackWinsScoresPan.add(blackWinningWhiteScore);
    
    //Set font and colour of the blackWinningWhiteScore.
    blackWinningWhiteScore.setFont(fontFourteen);
    blackWinningWhiteScore.setBackground(colors[5]);
    blackWinningWhiteScore.setForeground(colors[1]);
    
    //Add the black player's score.
    blackWinsScoresPan.add(blackWinningBlackScore);

    //Set the font and colour of the blackWinningBlackScore.
    blackWinningBlackScore.setFont(fontFourteen);
    blackWinningBlackScore.setBackground(colors[5]);
    blackWinningBlackScore.setForeground(colors[1]);
    
    //--------------------set up the draw panel------------------------
    
    //Set up the layout for the blackWin panel.
    BorderLayout drawLayout = new BorderLayout();
    drawPan.setLayout(drawLayout);
    
    //Set the background to dark green.
    drawPan.setBackground(colors[8]);
    
    //Set up the label for if the game ends in a draw.
    drawPan.add(drawLabel,BorderLayout.PAGE_START);
    
    //Set up the font and colours for the label.
    drawLabel.setFont(endTitleFont);
    drawLabel.setForeground(colors[10]);
    drawLabel.setBackground(colors[8]);
    
    //Add the drawSubPan.
    drawPan.add(drawSubPan);    
    
    //--------------------set up the drawSubPan-----------------------
    
    //Set up the layout for the drawSubPan.
    BoxLayout drawSubPanLayout = new BoxLayout(drawSubPan,BoxLayout.Y_AXIS);
    drawSubPan.setLayout(drawSubPanLayout);
    
    //Set the background for the sub panel as light green.
    drawSubPan.setBackground(colors[8]);
    
    //Add the drawWinsScores panel.
    drawSubPan.add(drawScoresPan);

    //Add the drawButtons panel .
    drawSubPan.add(drawButtons);
    
    //--------------------Set up the drawButtons panel---------------------------------
    //Set up the layout for the drawButtons panel.
    FlowLayout drawButtonsLayout = new FlowLayout();
    drawButtons.setLayout(drawButtonsLayout);
    
    //Set the background to light green.
    drawButtons.setBackground(colors[8]);
    
    //Add the button for the draw buttons to play again.
    drawButtons.add(drawWannaPlayAgain);
    
    //Set the font and colour of the drawWannaPlayAgain.
    drawWannaPlayAgain.setFont(fontFourteen);
    drawWannaPlayAgain.setBackground(colors[5]);
    drawWannaPlayAgain.setForeground(colors[1]);
    
    //Add the button to go back to the main menu.
    drawButtons.add(drawMainMenuButton);
    
    //Set the font and colour for the draw win buttons panel to go back to the main menu.
    drawMainMenuButton.setFont(fontFourteen);
    drawMainMenuButton.setBackground(colors[5]);
    drawMainMenuButton.setForeground(colors[1]);
    
    //Add action listeners to both of the buttons.
    drawWannaPlayAgain.addActionListener(this);
    drawMainMenuButton.addActionListener(this);
    
    //---------------------set up the drawScoresPan---------------------
    //Set up the layout for the drawScoresPan.
    FlowLayout drawScoresPanLayout = new FlowLayout();
    drawScoresPan.setLayout(drawScoresPanLayout);
    
    //Set the background for the subPanel as light green.
    drawScoresPan.setBackground(colors[8]);
    
    //Add the white player's score.
    drawScoresPan.add(drawWinningWhiteScore);
    
    //Set font and colour of the drawWinningWhiteScore.
    drawWinningWhiteScore.setFont(fontFourteen);
    drawWinningWhiteScore.setBackground(colors[5]);
    drawWinningWhiteScore.setForeground(colors[1]);
    
    //Add the black player's score.
    drawScoresPan.add(drawWinningBlackScore);

    //Set the font and colour of the drawWinningBlackScore.
    drawWinningBlackScore.setFont(fontFourteen);
    drawWinningBlackScore.setBackground(colors[5]);
    drawWinningBlackScore.setForeground(colors[1]);
    
    //----------------Set up the gameBoard-----------------------------------
    
    //Set the layout of the grid.
    GridLayout gameBoardGrid = new GridLayout(8,8);
    gameBoard.setLayout(gameBoardGrid);
    
    //Set the background as light green.
    gameBoard.setBackground(colors[8]);
    
    //Set up the different buttons for the game board.
    
    //Set up the first row.
    gameBoard.add(a1);
    gameBoard.add(b1);
    gameBoard.add(c1);
    gameBoard.add(d1);
    gameBoard.add(e1);
    gameBoard.add(f1);
    gameBoard.add(g1);
    gameBoard.add(h1);
    
    //Set up the second row.
    gameBoard.add(a2);
    gameBoard.add(b2);
    gameBoard.add(c2);
    gameBoard.add(d2);
    gameBoard.add(e2);
    gameBoard.add(f2);
    gameBoard.add(g2);
    gameBoard.add(h2);
    
    //Set up the third row.
    gameBoard.add(a3);
    gameBoard.add(b3);
    gameBoard.add(c3);
    gameBoard.add(d3);
    gameBoard.add(e3);
    gameBoard.add(f3);
    gameBoard.add(g3);
    gameBoard.add(h3);
    
    //Set up the fourth row.
    gameBoard.add(a4);
    gameBoard.add(b4);
    gameBoard.add(c4);
    gameBoard.add(d4);
    gameBoard.add(e4);
    gameBoard.add(f4);
    gameBoard.add(g4);
    gameBoard.add(h4);
    
    //Set up the fifth row.
    gameBoard.add(a5);
    gameBoard.add(b5);
    gameBoard.add(c5);
    gameBoard.add(d5);
    gameBoard.add(e5);
    gameBoard.add(f5);
    gameBoard.add(g5);
    gameBoard.add(h5);
    
    //Set up the sixth row.
    gameBoard.add(a6);
    gameBoard.add(b6);
    gameBoard.add(c6);
    gameBoard.add(d6);
    gameBoard.add(e6);
    gameBoard.add(f6);
    gameBoard.add(g6);
    gameBoard.add(h6);
    
    //Set up the seventh row.
    gameBoard.add(a7);
    gameBoard.add(b7);
    gameBoard.add(c7);
    gameBoard.add(d7);
    gameBoard.add(e7);
    gameBoard.add(f7);
    gameBoard.add(g7);
    gameBoard.add(h7);
    
    //Set up the eighth row.
    gameBoard.add(a8);
    gameBoard.add(b8);
    gameBoard.add(c8);
    gameBoard.add(d8);
    gameBoard.add(e8);
    gameBoard.add(f8);
    gameBoard.add(g8);
    gameBoard.add(h8);
    
    //Add action listener to all of the button tiles.
    a1.addActionListener(this);
    a2.addActionListener(this);
    a3.addActionListener(this);
    a4.addActionListener(this);
    a5.addActionListener(this);
    a6.addActionListener(this);
    a7.addActionListener(this);
    a8.addActionListener(this);
    b1.addActionListener(this);
    b2.addActionListener(this);
    b3.addActionListener(this);
    b4.addActionListener(this);
    b5.addActionListener(this);
    b6.addActionListener(this);
    b7.addActionListener(this);
    b8.addActionListener(this);
    c1.addActionListener(this);
    c2.addActionListener(this);
    c3.addActionListener(this);
    c4.addActionListener(this);
    c5.addActionListener(this);
    c6.addActionListener(this);
    c7.addActionListener(this);
    c8.addActionListener(this);
    d1.addActionListener(this);
    d2.addActionListener(this);
    d3.addActionListener(this);
    d4.addActionListener(this);
    d5.addActionListener(this);
    d6.addActionListener(this);
    d7.addActionListener(this);
    d8.addActionListener(this);
    e1.addActionListener(this);
    e2.addActionListener(this);
    e3.addActionListener(this);
    e4.addActionListener(this);
    e5.addActionListener(this);
    e6.addActionListener(this);
    e7.addActionListener(this);
    e8.addActionListener(this);
    f1.addActionListener(this);
    f2.addActionListener(this);
    f3.addActionListener(this);
    f4.addActionListener(this);
    f5.addActionListener(this);
    f6.addActionListener(this);
    f7.addActionListener(this);
    f8.addActionListener(this);
    g1.addActionListener(this);
    g2.addActionListener(this);
    g3.addActionListener(this);
    g4.addActionListener(this);
    g5.addActionListener(this);
    g6.addActionListener(this);
    g7.addActionListener(this);
    g8.addActionListener(this);
    h1.addActionListener(this);
    h2.addActionListener(this);
    h3.addActionListener(this);
    h4.addActionListener(this);
    h5.addActionListener(this);
    h6.addActionListener(this);
    h7.addActionListener(this);
    h8.addActionListener(this);
    
    //Set the font and colour of the buttons.
    
    //This is the font and colour setup for button or tile a1.
    a1.setFont(fontTwelve);
    a1.setBackground(colors[11]);
    a1.setForeground(colors[11]);
    a1.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This is the font and colour setup for button or tile a2.
    a2.setFont(fontTwelve);
    a2.setBackground(colors[11]);
    a2.setForeground(colors[11]);
    a2.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This is the font and colour setup for button or tile a3.
    a3.setFont(fontTwelve);
    a3.setBackground(colors[11]);
    a3.setForeground(colors[11]);
    a3.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This is the font and colour setup for button or tile a4.
    a4.setFont(fontTwelve);
    a4.setBackground(colors[11]);
    a4.setForeground(colors[11]);
    a4.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This is the font and colour setup for button or tile a5.
    a5.setFont(fontTwelve);
    a5.setBackground(colors[11]);
    a5.setForeground(colors[11]);
    a5.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This is the font and colour setup for button or tile a6.
    a6.setFont(fontTwelve);
    a6.setBackground(colors[11]);
    a6.setForeground(colors[11]);
    a6.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This is the font and colour setup for button or tile a7.
    a7.setFont(fontTwelve);
    a7.setBackground(colors[11]);
    a7.setForeground(colors[11]);
    a7.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile a8.
    a8.setFont(fontTwelve);
    a8.setBackground(colors[11]);
    a8.setForeground(colors[11]);
    a8.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile b1.
    b1.setFont(fontTwelve);
    b1.setBackground(colors[11]);
    b1.setForeground(colors[11]);
    b1.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile b2.
    b2.setFont(fontTwelve);
    b2.setBackground(colors[11]);
    b2.setForeground(colors[11]);
    b2.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile b3.
    b3.setFont(fontTwelve);
    b3.setBackground(colors[11]);
    b3.setForeground(colors[11]);
    b3.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile b4.
    b4.setFont(fontTwelve);
    b4.setBackground(colors[11]);
    b4.setForeground(colors[11]);
    b4.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile b5.
    b5.setFont(fontTwelve);
    b5.setBackground(colors[11]);
    b5.setForeground(colors[11]);
    b5.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile b6.
    b6.setFont(fontTwelve);
    b6.setBackground(colors[11]);
    b6.setForeground(colors[11]);
    b6.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile b7.
    b7.setFont(fontTwelve);
    b7.setBackground(colors[11]);
    b7.setForeground(colors[11]);
    b7.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile b8.
    b8.setFont(fontTwelve);
    b8.setBackground(colors[11]);
    b8.setForeground(colors[11]);
    b8.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile c1.
    c1.setFont(fontTwelve);
    c1.setBackground(colors[11]);
    c1.setForeground(colors[11]);
    c1.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile c2.
    c2.setFont(fontTwelve);
    c2.setBackground(colors[11]);
    c2.setForeground(colors[11]);
    c2.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile c3.
    c3.setFont(fontTwelve);
    c3.setBackground(colors[11]);
    c3.setForeground(colors[11]);
    c3.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile c4.
    c4.setFont(fontTwelve);
    c4.setBackground(colors[11]);
    c4.setForeground(colors[11]);
    c4.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile c5.
    c5.setFont(fontTwelve);
    c5.setBackground(colors[11]);
    c5.setForeground(colors[11]);
    c5.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile c6.
    c6.setFont(fontTwelve);
    c6.setBackground(colors[11]);
    c6.setForeground(colors[11]);
    c6.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile c7.
    c7.setFont(fontTwelve);
    c7.setBackground(colors[11]);
    c7.setForeground(colors[11]);
    c7.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile c8.
    c8.setFont(fontTwelve);
    c8.setBackground(colors[11]);
    c8.setForeground(colors[11]);
    c8.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile d1.
    d1.setFont(fontTwelve);
    d1.setBackground(colors[11]);
    d1.setForeground(colors[11]);
    d1.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile d2.
    d2.setFont(fontTwelve);
    d2.setBackground(colors[11]);
    d2.setForeground(colors[11]);
    d2.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile d3.
    d3.setFont(fontTwelve);
    d3.setBackground(colors[11]);
    d3.setForeground(colors[11]);
    d3.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile d4.
    d4.setFont(fontTwelve);
    d4.setBackground(colors[11]);
    d4.setForeground(colors[11]);
    d4.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile d5.
    d5.setFont(fontTwelve);
    d5.setBackground(colors[11]);
    d5.setForeground(colors[11]);
    d5.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile d6.
    d6.setFont(fontTwelve);
    d6.setBackground(colors[11]);
    d6.setForeground(colors[11]);
    d6.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile d7.
    d7.setFont(fontTwelve);
    d7.setBackground(colors[11]);
    d7.setForeground(colors[11]);
    d7.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile d8.
    d8.setFont(fontTwelve);
    d8.setBackground(colors[11]);
    d8.setForeground(colors[11]);
    d8.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile e1.
    e1.setFont(fontTwelve);
    e1.setBackground(colors[11]);
    e1.setForeground(colors[11]);
    e1.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile e2.
    e2.setFont(fontTwelve);
    e2.setBackground(colors[11]);
    e2.setForeground(colors[11]);
    e2.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile e3.
    e3.setFont(fontTwelve);
    e3.setBackground(colors[11]);
    e3.setForeground(colors[11]);
    e3.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile e4.
    e4.setFont(fontTwelve);
    e4.setBackground(colors[11]);
    e4.setForeground(colors[11]);
    e4.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile e5.
    e5.setFont(fontTwelve);
    e5.setBackground(colors[11]);
    e5.setForeground(colors[11]);
    e5.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile e6.
    e6.setFont(fontTwelve);
    e6.setBackground(colors[11]);
    e6.setForeground(colors[11]);
    e6.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile e7.
    e7.setFont(fontTwelve);
    e7.setBackground(colors[11]);
    e7.setForeground(colors[11]);
    e7.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile e8.
    e8.setFont(fontTwelve);
    e8.setBackground(colors[11]);
    e8.setForeground(colors[11]);
    e8.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile f1.
    f1.setFont(fontTwelve);
    f1.setBackground(colors[11]);
    f1.setForeground(colors[11]);
    f1.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile f2.
    f2.setFont(fontTwelve);
    f2.setBackground(colors[11]);
    f2.setForeground(colors[11]);
    f2.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile f3.
    f3.setFont(fontTwelve);
    f3.setBackground(colors[11]);
    f3.setForeground(colors[11]);
    f3.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This the font and colour setup for button or tile f4.
    f4.setFont(fontTwelve);
    f4.setBackground(colors[11]);
    f4.setForeground(colors[11]);
    f4.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This is the font and colour setup for button or tile f5.
    f5.setFont(fontTwelve);
    f5.setBackground(colors[11]);
    f5.setForeground(colors[11]);
    f5.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This is the font and colour setup for button or tile f6.
    f6.setFont(fontTwelve);
    f6.setBackground(colors[11]);
    f6.setForeground(colors[11]);
    f6.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This is the font and colour setup for button or tile f7.
    f7.setFont(fontTwelve);
    f7.setBackground(colors[11]);
    f7.setForeground(colors[11]);
    f7.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This is the font and colour setup for button or tile f8.
    f8.setFont(fontTwelve);
    f8.setBackground(colors[11]);
    f8.setForeground(colors[11]);
    f8.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This is the font and colour setup for button or tile g1.
    g1.setFont(fontTwelve);
    g1.setBackground(colors[11]);
    g1.setForeground(colors[11]);
    g1.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This is the font and colour setup for button or tile g2.
    g2.setFont(fontTwelve);
    g2.setBackground(colors[11]);
    g2.setForeground(colors[11]);
    g2.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This is the font and colour setup for button or tile g3.
    g3.setFont(fontTwelve);
    g3.setBackground(colors[11]);
    g3.setForeground(colors[11]);
    g3.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This is the font and colour setup for button or tile g4.
    g4.setFont(fontTwelve);
    g4.setBackground(colors[11]);
    g4.setForeground(colors[11]);
    g4.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This is the font and colour setup for button or tile g5.
    g5.setFont(fontTwelve);
    g5.setBackground(colors[11]);
    g5.setForeground(colors[11]);
    g5.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This is the font and colour setup for button or tile g6.
    g6.setFont(fontTwelve);
    g6.setBackground(colors[11]);
    g6.setForeground(colors[11]);
    g6.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This is the font and colour setup for button or tile g7.
    g7.setFont(fontTwelve);
    g7.setBackground(colors[11]);
    g7.setForeground(colors[11]);
    g7.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This is the font and colour setup for button or tile g8.
    g8.setFont(fontTwelve);
    g8.setBackground(colors[11]);
    g8.setForeground(colors[11]);
    g8.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This is the font and colour setup for button or tile h1.
    h1.setFont(fontTwelve);
    h1.setBackground(colors[11]);
    h1.setForeground(colors[11]);
    h1.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This is the font and colour setup for button or tile h2.
    h2.setFont(fontTwelve);
    h2.setBackground(colors[11]);
    h2.setForeground(colors[11]);
    h2.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This is the font and colour setup for button or tile h3.
    h3.setFont(fontTwelve);
    h3.setBackground(colors[11]);
    h3.setForeground(colors[11]);
    h3.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This is the font and colour setup for button or tile h1.
    h1.setFont(fontTwelve);
    h1.setBackground(colors[11]);
    h1.setForeground(colors[11]);
    h1.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This is the font and colour setup for button or tile h2.
    h2.setFont(fontTwelve);
    h2.setBackground(colors[11]);
    h2.setForeground(colors[11]);
    h2.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This is the font and colour setup for button or tile h3.
    h3.setFont(fontTwelve);
    h3.setBackground(colors[11]);
    h3.setForeground(colors[11]);
    h3.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This is the font and colour setup for button or tile h4.
    h4.setFont(fontTwelve);
    h4.setBackground(colors[11]);
    h4.setForeground(colors[11]);
    h4.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This is the font and colour setup for button or tile h5.
    h5.setFont(fontTwelve);
    h5.setBackground(colors[11]);
    h5.setForeground(colors[11]);
    h5.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This is the font and colour setup for button or tile h6.
    h6.setFont(fontTwelve);
    h6.setBackground(colors[11]);
    h6.setForeground(colors[11]);
    h6.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This is the font and colour setup for button or tile h7.
    h7.setFont(fontTwelve);
    h7.setBackground(colors[11]);
    h7.setForeground(colors[11]);
    h7.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    //This is the font and colour setup for button or tile h8.
    h8.setFont(fontTwelve);
    h8.setBackground(colors[11]);
    h8.setForeground(colors[11]);
    h8.setBorder(BorderFactory.createLineBorder(colors[0],4));
    
    // -------------- set up INGAME panel -----------------------------------
    //Set the ingame panel as a grid layout.
    BorderLayout gameBorder = new BorderLayout();
    
    //Set the layout of the game panel to game border.
    inGamePan.setLayout(gameBorder);
    
    //Set the ingame panel as opaque being true, meaning that the background cannot be seen.
    inGamePan.setOpaque(true);
    
    //Set the background of the ingame panel to be light light green.
    inGamePan.setBackground(colors[8]);
    
    //Add the scoreboard panel.
    inGamePan.add(scoreboard, BorderLayout.LINE_END);
    
    //Add the gameBoard panel.
    inGamePan.add(gameBoard,BorderLayout.LINE_START);
    
    //------------------ add the panels to the JFrame ----------------------
    
    //Add the main panel to the frame only, because adding another panel will cause the screen to be split up, as the frame is set to grid layout.
    add(mainPan);
    mainPan.setVisible(true);
    howToPlayPan.setVisible(false);
    inGamePan.setVisible(false);
    
    //------- set the Frame so the user can see it --------------
    setVisible(true);
    
  }//end of InvadeAndConquer().
  
  // This method runs when an event occurs ******************************************  ACTION LISTENER ***********
  // Code in here only runs when a user interacts with a componet, such as a Button 
  // that has an action listener attached to it
  public void actionPerformed(ActionEvent event){
    
    //find out the name of the component that was used
    String command = event.getActionCommand();  
    
    //If the command is equalled to HOW TO PLAY.
    if (command.equals("HOW TO PLAY"))
    {
      
      System.out.println("HOW TO PLAY button pressed");  // display message in console(for testing)
      
      //Set up the original code again.
      initialSetup();
      
      //Set up arrayToButtons.
      arrayToButtons();
      
      //Remove the main panel out of the frame.
      remove(mainPan);
      
      //Add the how to play panel to the frame.
      add(howToPlayPan);
      
      repaint();
      
      mainPan.setVisible(false);
      howToPlayPan.setVisible(true);
      

      
    }//end of if statement for if the command is equalled to how to play.
    
    //else if the command is equalled to BACK.
    else if(command.equals("BACK"))
    {
      //Display the message in the console for testing.
      System.out.println("Back button is pressed.");
      
      //Remove the how to play panel out of the frame.
      remove(howToPlayPan);
      
      //Add the main menu panel back.
      add(mainPan);
      
      repaint();
      
      //Set main panel's visiblity as true.
      mainPan.setVisible(true);
      
      //Set the how to play panel visiblity as false.
      howToPlayPan.setVisible(false);
      
    }//end of else if the command is equalled to back.
    
    //else if the play the game button is clicked.
    else if(command.equals("PLAY THE GAME") || command.equals("WANNA PLAY AGAIN!"))
    {
      //Display the message that play the game button is pressed for testing.
      System.out.println("The play the game button or wanna play again button is pressed.");
      
      //remove the main menu panel.
      remove(mainPan);
      
      //Remove all of the winning panels and draw panel.
      remove(whiteWinPan);
      remove(blackWinPan);
      remove(drawPan);
      
      setSize (957, 720);

      //Set number of both tokens to 2.
      numOfWhiteTokens = 2;
      numOfBlackTokens = 2;
      
      //Call the initial board setup method.
      initialSetup();
      
      //count tokens.
      countTokens();
      
      //Set turnCounter to 1.
      turnCounter = 1;
      
      //Set the wheel output to nothing.
      wheelOutput.setText("");
      
      //Set hasChanged to 1.
      hasChanged = 1;
      
      //Add the ingame panel.
      add(inGamePan);
      repaint();
      
      //Call switchTurns method.
      switchTurns();
      
      //Set the main panel's visiblity as false and the inGame panel visiblity as true.
      inGamePan.setVisible(true);
      
      //Display the board tracker.
      displayBoardTracker();
      
    }//end of else if the play the game button is clicked.
    
    //Else if the command equals to A1.
    else if(command.equals("A1"))
    {
      
      //Set the originalColumn and originalRow values.
      originalColumn = 0;
      originalRow = 0;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call the checkDown method.
      checkDown();

      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
     
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
        
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of else if statement for the command equals to A1.
    
    //else if the command equals to A2.
    else if(command.equals("A2"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 0;
      originalRow = 1;
      
      //Set hasChanged to 0.
      hasChanged = 0;
    
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the checkUp method.
      checkUp();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();

      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner or isBlackWinner returns true, then remove the inGame panel and add the win panel.
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
      
    }//end of else if the command is equalled to A2.
    
    //else if the command equals to A3.
    else if(command.equals("A3"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 0;
      originalRow = 2;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the checkUp method.
      checkUp();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner or isBlackWinner returns true, then remove the inGame panel and add the win panel.
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of else if the command is equalled to A3.
    
    //else if the command equals to A4.
    else if(command.equals("A4"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 0;
      originalRow = 3;
      
      //Set hasChanged to 0.
      hasChanged = 0;

      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the checkUp method.
      checkUp();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);

      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of else if the command is equalled to A4.
    
    //else if the command equals to A5.
    else if(command.equals("A5"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 0;
      originalRow = 4;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the checkUp method.
      checkUp();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
            
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to A5.
    
    //else if the command equals to A6.
    else if(command.equals("A6"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 0;
      originalRow = 5;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the checkUp method.
      checkUp();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to A6.
    
    //else if the command equals to A7.
    else if(command.equals("A7"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 0;
      originalRow = 6;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the checkUp method.
      checkUp();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
 
      
      //if the isWhiteWinner or isBlackWinner returns true, then remove the inGame panel and add the win panel.
      if(isWhiteWinner() == true || isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(winPan);
        
        //Update the screen.
        repaint();
      }//end of if either methods return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
      
    }//end of if the command is equalled to A7.
    
    //else if the command equals to A8.
    else if(command.equals("A8"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 0;
      originalRow = 7;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkUp method.
      checkUp();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
    
      
      //if the isWhiteWinner or isBlackWinner returns true, then remove the inGame panel and add the win panel.
      if(isWhiteWinner() == true || isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(winPan);
        
        //Update the screen.
        repaint();
      }//end of if either methods return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to A8.
    
    //else if the command equals to B1.
    else if(command.equals("B1"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 1;
      originalRow = 0;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call the checksLeftSide method.
      checkLeftSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //if the isWhiteWinner or isBlackWinner returns true, then remove the inGame panel and add the win panel.
      if(isWhiteWinner() == true || isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(winPan);
        
        //Update the screen.
        repaint();
      }//end of if either methods return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to B1.
    
    //Else if the command is equalled to B2.
    else if(command.equals("B2"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 1;
      originalRow = 1;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to B2.
    
    //else if the command is equalled to B3.
    else if(command.equals("B3"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 1;
      originalRow = 2;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to B3.
    
    //else if the command is equalled to B4.
    else if(command.equals("B4"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 1;
      originalRow = 3;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to B4.
    
    //else if the command is equalled to B5.
    else if(command.equals("B5"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 1;
      originalRow = 4;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to B5.
    
    //else if the command is equalled to B6.
    else if(command.equals("B6"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 1;
      originalRow = 5;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to B6.
    
    //else if the command is equalled to B7.
    else if(command.equals("B7"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 1;
      originalRow = 6;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to B7.
    
    //else if the command is equalled to B8.
    else if(command.equals("B8"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 1;
      originalRow = 7;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to B8.
    
    //else if the command is equalled to C1.
    else if(command.equals("C1"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 2;
      originalRow = 0;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      
     //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to C1.
    
    //else if the command is equalled to C2.
    else if(command.equals("C2"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 2;
      originalRow = 1;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to C2.
    
    //else if the command is equalled to C3.
    else if(command.equals("C3"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 2;
      originalRow = 2;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to C3.
    
    //else if the command is equalled to C4.
    else if(command.equals("C4"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 2;
      originalRow = 3;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to C4.
    
    //else if the command is equalled to C5.
    else if(command.equals("C5"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 2;
      originalRow = 4;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {

        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {

        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {

        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to C5.
    
    //else if the command is equalled to C6.
    else if(command.equals("C6"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 2;
      originalRow = 5;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //call countTokens method.
        countTokens();
        
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to C6.
    
    //Else if the command is equalled to C7.
    else if(command.equals("C7"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 2;
      originalRow = 6;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to C7.
    
    //else if the command is equalled to C8.
    else if(command.equals("C8"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 2;
      originalRow = 7;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to C8.
    
    //else if the command is equalled to D1.
    else if(command.equals("D1"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 3;
      originalRow = 0;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to D1.
    
    //Else if the command is equalled to D2.
    else if(command.equals("D2"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 3;
      originalRow = 1;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to D2.
    
    //Else if the command is equalled to D3.
    else if(command.equals("D3"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 3;
      originalRow = 2;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {

        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {

        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to D3.
    
    //Else if the command is equalled to D6.
    else if(command.equals("D6"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 3;
      originalRow = 5;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to D6.
    
    //Else if the command is equalled to D7.
    else if(command.equals("D7"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 3;
      originalRow = 6;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to D7.
    
    //else if the command is equalled to D8.
    else if(command.equals("D8"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 3;
      originalRow = 7;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to D8.
    
    //else if the command is equalled to E1.
    else if(command.equals("E1"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 4;
      originalRow = 0;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to E1.
    
    //Else if the command is equalled to E2.
    else if(command.equals("E2"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 4;
      originalRow = 1;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to E2.
    
    //Else if the command is equalled to E3.
    else if(command.equals("E3"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 4;
      originalRow = 2;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to E3.
    
    //Else if the command is equalled to E6.
    else if(command.equals("E6"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 4;
      originalRow = 5;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to E6.
    
    //Else if the command is equalled to E7.
    else if(command.equals("E7"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 4;
      originalRow = 6;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to E7.
    
    //else if the command is equalled to E8.
    else if(command.equals("E8"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 4;
      originalRow = 7;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to E8.
    
    //else if the command is equalled to F1.
    else if(command.equals("F1"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 5;
      originalRow = 0;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner or isBlackWinner returns true, then remove the inGame panel and add the win panel.
      if(isWhiteWinner() == true || isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(winPan);
        
        //Update the screen.
        repaint();
      }//end of if either methods return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to F1.
    
    //Else if the command is equalled to F2.
    else if(command.equals("F2"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 5;
      originalRow = 1;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
     
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to F2.
    
    //Else if the command is equalled to F3.
    else if(command.equals("F3"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 5;
      originalRow = 2;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to F3.
    
    //Else if the command is equalled to F4.
    else if(command.equals("F4"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 5;
      originalRow = 3;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to F4.
    
    //Else if the command is equalled to F5.
    else if(command.equals("F5"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 5;
      originalRow = 4;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to F5.
    
    //Else if the command is equalled to F6.
    else if(command.equals("F6"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 5;
      originalRow = 5;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to F6.
    
    //Else if the command is equalled to F7.
    else if(command.equals("F7"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 5;
      originalRow = 6;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to F7.
    
    //else if the command is equalled to F8.
    else if(command.equals("F8"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 5;
      originalRow = 7;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to F8.
    
    //else if the command is equalled to G1.
    else if(command.equals("G1"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 6;
      originalRow = 0;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to G1.
    
    //Else if the command is equalled to G2.
    else if(command.equals("G2"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 6;
      originalRow = 1;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to G2.
    
    
    //Else if the command is equalled to G3.
    else if(command.equals("G3"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 6;
      originalRow = 2;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to G3.
    
    //Else if the command is equalled to G4.
    else if(command.equals("G4"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 6;
      originalRow = 3;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to G4.
    
    //Else if the command is equalled to G5.
    else if(command.equals("G5"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 6;
      originalRow = 4;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to G5.
    
    //Else if the command is equalled to G6.
    else if(command.equals("G6"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 6;
      originalRow = 5;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
     
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to G6.
    
    //Else if the command is equalled to G7.
    else if(command.equals("G7"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 6;
      originalRow = 6;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      
      //call the checkDownRightDiagonalSide method.
      checkDownRightDiagonalSide();
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
          
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to G7.
    
    //else if the command is equalled to G8.
    else if(command.equals("G8"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 6;
      originalRow = 7;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksRightSide method.
      checkRightSide();
      
      //call the check up method.
      checkUp();
      
      //call the check left side method.
      checkLeftSide();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call the checkUpRightDiagonalSide method.
      checkUpRightDiagonalSide();
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to G8.
    
    //Else if the command equals to H1.
    else if(command.equals("H1"))
    {
      
      //Set the originalColumn and originalRow values.
      originalColumn = 7;
      originalRow = 0;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksLeftSide method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkDown method.
      checkDown();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of else if the command is equalled to H1.
    
    //else if the command equals to H2.
    else if(command.equals("H2"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 7;
      originalRow = 1;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checkLeftSide method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the checkUp method.
      checkUp();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of else if the command is equalled to H2.
    
    //else if the command equals to H3.
    else if(command.equals("H3"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 7;
      originalRow = 2;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checkLeftSide method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the checkUp method.
      checkUp();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      //call countTokens method.
      countTokens();

      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of else if the command is equalled to H3.

    //else if the command equals to H4.
    else if(command.equals("H4"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 7;
      originalRow = 3;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checkLeftSide method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the checkUp method.
      checkUp();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);

      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of else if the command is equalled to H4.
    
    //else if the command equals to H5.
    else if(command.equals("H5"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 7;
      originalRow = 4;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checkLeftSide method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the checkUp method.
      checkUp();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of else if the command is equalled to H5.
    
    //else if the command equals to H6.
    else if(command.equals("H6"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 7;
      originalRow = 5;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checkLeftSide method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the checkUp method.
      checkUp();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of else if the command is equalled to H6.
    
    //else if the command equals to H7.
    else if(command.equals("H7"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 7;
      originalRow = 6;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checkLeftSide method.
      checkLeftSide();
      
      //call the checkDownLeftDiagonalSide method.
      checkDownLeftDiagonalSide();
      
      //call the checkDown method.
      checkDown();
      
      //call the checkUp method.
      checkUp();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      
      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of else if the command is equalled to H7.
    
    //else if the command equals to H8.
    else if(command.equals("H8"))
    {
      //Set the originalColumn and originalRow values.
      originalColumn = 7;
      originalRow = 7;
      
      //Set hasChanged to 0.
      hasChanged = 0;
      
      //Call the checksLeftSide method.
      checkLeftSide();
      
      //call the checkUp method.
      checkUp();
      
      //call the checkUpLeftDiagonalSide method.
      checkUpLeftDiagonalSide();
      
      //call countTokens method.
      countTokens();
      
      //Set the text to make sure that the white,black and draw winning scores  are being updated.
      whiteWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      whiteWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      blackWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      blackWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);
      drawWinningWhiteScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfWhiteTokens);
      drawWinningBlackScore.setText("XXXXXXXXXXXXXXXXXXXX"+numOfBlackTokens);

      //if the isWhiteWinner returns true, then remove the inGame panel and add the whitewin panel.
      if(isWhiteWinner() == true)
      {
        
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(whiteWinPan);
        
        //Update the screen.
        repaint();
       
      }//end of if white win method return true.
      
      //if the isBlackWinner returns true, then remove the inGame panel and add the blackwin panel.
      else if(isBlackWinner() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(blackWinPan);
        
        //Update the screen.
        repaint();
      }//end of if black win method return true.
      
      //if the players draw, then remove the inGame panel and add the draw panel.
      else if(isDraw() == true)
      {
        //remove the game panel.
        remove(inGamePan);
        
        //add the winning panel.
        add(drawPan);
        
        //Update the screen.
        repaint();
      }//end of if draw method return true.
      
      //else if neither player has won.
      else if(isWhiteWinner() == false && isBlackWinner() == false)
      {
        //Switch turns between players.
        switchTurns();
        
      }//end of else if statement for if neither player has won.
      
    }//end of if the command is equalled to H8.
    
    //Else if the command equals to the back to main menu.
    else if(command.equals("BACK TO MAIN MENU           "))
    {
      //Remove the game panel.
      remove(inGamePan);
      
      //adjust frame size
      setSize(1030, 720);
      
      //Add the areYouSure panel.
      add(areYouSure);
      repaint();
      
      //Set the areYouSure panel to visiblity as true.
      areYouSure.setVisible(true);
    }//end of the else if the command equals to BACK TO MAIN MENU.
    
    //Else if the command equals to YES.
    else if(command.equals("YES")||  command.equals("BACK TO MAIN MENU"))
    {
      //Remove the are you sure panel.
      remove(areYouSure);
      
      //remove all of the winning as well as the draw panels.
      remove(whiteWinPan);
      remove(blackWinPan);
      remove(drawPan);
      
      //reset the frame size to default
      setSize(1280, 720);
      
      add(mainPan);
      
      repaint();

    }//end of else if statement if the command is equalled to YES.
    
    //else if the command is equalled to NO.
    else if(command.equals("NO"))
    {
      //Remove the are you sure panel.
      remove(areYouSure);
      
      //Add the inGamePanel.
      add(inGamePan);
      repaint();
      
      //Set the inGamePanel as visible.
      inGamePan.setVisible(true);
      
    }//end of else if statement if the command equals to NO.
    
    //else if the command equals to I CANNOT GO!
    else if(command.equals("I CANNOT GO!                            "))
    {
      //Set hasChanged to 1.
      hasChanged = 1;
      switchTurns();

      
    }//end of else if body statements for if the command equals to I CANNOT GO!
    
  }// end of actionPerformed() **********************************************************************************

  /**The main method is used to run the program.
    *@param array of string arguments.
    */
  
  public static void main (String[] args) throws IOException //************************************************** MAIN() *************
  {
    //Create the file to store names.
    File playerNameFile = new File("StorePlayerName.txt");
    
    //Add a Scanner object to read text from the keyboard.
    Scanner input = new Scanner(System.in);
    
    //Ask the users their names before the game starts.
    System.out.println("-----------------------BEFORE YOU START INVADE AND CONQUER GAME-------------------------------");
    
    //Ask the players to type in thier names.
    System.out.print("CAN THE WHITE PLAYER PLEASE ENTER HIS OR HER NAME:");
    String playerOneName = input.nextLine();
    System.out.print("CAN THE BLACK PLAYER  PLEASE ENTER HIS OR HER NAME:");
    String playerTwoName = input.nextLine();
    
    //Display the Thank You Line.
    System.out.println("THANK YOU!!!");
    
    //Create a dotted line.
    System.out.println("------------------------------------------------------------------------------");
    
    //Close the Scanner input object.
    input.close();
    
    //Print out the names onto a text file so it could be called into the game later.
    
    //Open a printer object to print information to my file.
    PrintWriter printOut = new PrintWriter(playerNameFile);
    
    //Writes the top player on the first line of text file.
    printOut.println(playerOneName); 
    
    //Writes the score of the player on the second line of text file.
    printOut.println(playerTwoName);
    
    //immediately close the "stream" to the file if no longer printing it.
    printOut.close();

    //InvadeAndConquer frame1
    new InvadeAndConquerV2(); // creates a new object called a FrameEx1 (class name) with properties set up with method FrameEx1() ...title, size and visible
    

  }//end of main
  
}//end of class


